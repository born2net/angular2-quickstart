System.register(['angular2/angular2', 'angular2/src/core/facade/lang'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var angular2_1, lang_1;
    var _nextRequestId, JSONP_HOME, _jsonpConnections, BrowserJsonp;
    function _getJsonpConnections() {
        if (_jsonpConnections === null) {
            _jsonpConnections = lang_1.global[JSONP_HOME] = {};
        }
        return _jsonpConnections;
    }
    return {
        setters:[
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            }],
        execute: function() {
            let _nextRequestId = 0;
            JSONP_HOME = '__ng_jsonp__';
            var _jsonpConnections = null;
            // Make sure not to evaluate this in a non-browser environment!
            let BrowserJsonp = class {
                // Construct a <script> element with the specified URL
                build(url) {
                    let node = document.createElement('script');
                    node.src = url;
                    return node;
                }
                nextRequestID() { return `__req${_nextRequestId++}`; }
                requestCallback(id) { return `${JSONP_HOME}.${id}.finished`; }
                exposeConnection(id, connection) {
                    let connections = _getJsonpConnections();
                    connections[id] = connection;
                }
                removeConnection(id) {
                    var connections = _getJsonpConnections();
                    connections[id] = null;
                }
                // Attach the <script> element to the DOM
                send(node) { document.body.appendChild((node)); }
                // Remove <script> element from the DOM
                cleanup(node) {
                    if (node.parentNode) {
                        node.parentNode.removeChild((node));
                    }
                }
            };
            BrowserJsonp = __decorate([
                angular2_1.Injectable()
            ], BrowserJsonp);
            BrowserJsonp = BrowserJsonp;
        }
    }
});
//# sourceMappingURL=browser_jsonp.js.map