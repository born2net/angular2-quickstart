System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/exceptions', 'angular2/src/core/facade/collection'], function(exports_1) {
    var lang_1, exceptions_1, collection_1;
    var Headers;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            }],
        execute: function() {
            /**
             * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
             * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
             *
             * The only known difference between this `Headers` implementation and the spec is the
             * lack of an `entries` method.
             *
             * ### Example ([live demo](http://plnkr.co/edit/MTdwT6?p=preview))
             *
             * ```
             * import {Headers} from 'angular2/http';
             *
             * var firstHeaders = new Headers();
             * firstHeaders.append('Content-Type', 'image/jpeg');
             * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
             *
             * // Create headers from Plain Old JavaScript Object
             * var secondHeaders = new Headers({
             *   'X-My-Custom-Header': 'Angular'
             * });
             * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
             *
             * var thirdHeaders = new Headers(secondHeaders);
             * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
             * ```
             */
            class Headers {
                constructor(headers) {
                    if (headers instanceof Headers) {
                        this._headersMap = headers._headersMap;
                        return;
                    }
                    this._headersMap = new collection_1.Map();
                    if (lang_1.isBlank(headers)) {
                        return;
                    }
                    // headers instanceof StringMap
                    collection_1.StringMapWrapper.forEach(headers, (v, k) => { this._headersMap.set(k, collection_1.isListLikeIterable(v) ? v : [v]); });
                }
                /**
                 * Appends a header to existing list of header values for a given header name.
                 */
                append(name, value) {
                    var mapName = this._headersMap.get(name);
                    var list = collection_1.isListLikeIterable(mapName) ? mapName : [];
                    list.push(value);
                    this._headersMap.set(name, list);
                }
                /**
                 * Deletes all header values for the given name.
                 */
                delete(name) { this._headersMap.delete(name); }
                forEach(fn) {
                    this._headersMap.forEach(fn);
                }
                /**
                 * Returns first header that matches given name.
                 */
                get(header) { return collection_1.ListWrapper.first(this._headersMap.get(header)); }
                /**
                 * Check for existence of header by given name.
                 */
                has(header) { return this._headersMap.has(header); }
                /**
                 * Provides names of set headers
                 */
                keys() { return collection_1.MapWrapper.keys(this._headersMap); }
                /**
                 * Sets or overrides header value for given name.
                 */
                set(header, value) {
                    var list = [];
                    if (collection_1.isListLikeIterable(value)) {
                        var pushValue = value.join(',');
                        list.push(pushValue);
                    }
                    else {
                        list.push(value);
                    }
                    this._headersMap.set(header, list);
                }
                /**
                 * Returns values of all headers.
                 */
                values() { return collection_1.MapWrapper.values(this._headersMap); }
                /**
                 * Returns list of header values for a given name.
                 */
                getAll(header) {
                    var headers = this._headersMap.get(header);
                    return collection_1.isListLikeIterable(headers) ? headers : [];
                }
                /**
                 * This method is not implemented.
                 */
                entries() { throw new exceptions_1.BaseException('"entries" method is not implemented on Headers class'); }
            }
            Headers = Headers;
        }
    }
});
//# sourceMappingURL=headers.js.map