System.register(['angular2/src/core/facade/collection', 'angular2/src/core/dom/dom_adapter', 'angular2/src/core/facade/lang'], function(exports_1) {
    var collection_1, dom_adapter_1, lang_1;
    var Log, BrowserDetection, browserDetection, _RE_SPECIAL_CHARS, _ESCAPE_RE, _singleTagWhitelist;
    function dispatchEvent(element, eventType) {
        dom_adapter_1.DOM.dispatchEvent(element, dom_adapter_1.DOM.createEvent(eventType));
    }
    exports_1("dispatchEvent", dispatchEvent);
    function el(html) {
        return dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.content(dom_adapter_1.DOM.createTemplate(html)));
    }
    exports_1("el", el);
    function containsRegexp(input) {
        return lang_1.RegExpWrapper.create(lang_1.StringWrapper.replaceAllMapped(input, _ESCAPE_RE, (match) => `\\${match[0]}`));
    }
    exports_1("containsRegexp", containsRegexp);
    function normalizeCSS(css) {
        css = lang_1.StringWrapper.replaceAll(css, /\s+/g, ' ');
        css = lang_1.StringWrapper.replaceAll(css, /:\s/g, ':');
        css = lang_1.StringWrapper.replaceAll(css, /'/g, '"');
        css = lang_1.StringWrapper.replaceAll(css, / }/g, '}');
        css = lang_1.StringWrapper.replaceAllMapped(css, /url\((\"|\s)(.+)(\"|\s)\)(\s*)/g, (match) => `url("${match[2]}")`);
        css = lang_1.StringWrapper.replaceAllMapped(css, /\[(.+)=([^"\]]+)\]/g, (match) => `[${match[1]}="${match[2]}"]`);
        return css;
    }
    exports_1("normalizeCSS", normalizeCSS);
    function stringifyElement(el) {
        var result = '';
        if (dom_adapter_1.DOM.isElementNode(el)) {
            var tagName = lang_1.StringWrapper.toLowerCase(dom_adapter_1.DOM.tagName(el));
            // Opening tag
            result += `<${tagName}`;
            // Attributes in an ordered way
            var attributeMap = dom_adapter_1.DOM.attributeMap(el);
            var keys = [];
            attributeMap.forEach((v, k) => keys.push(k));
            collection_1.ListWrapper.sort(keys);
            for (let i = 0; i < keys.length; i++) {
                var key = keys[i];
                var attValue = attributeMap.get(key);
                if (!lang_1.isString(attValue)) {
                    result += ` ${key}`;
                }
                else {
                    result += ` ${key}="${attValue}"`;
                }
            }
            result += '>';
            // Children
            var childrenRoot = dom_adapter_1.DOM.templateAwareRoot(el);
            var children = lang_1.isPresent(childrenRoot) ? dom_adapter_1.DOM.childNodes(childrenRoot) : [];
            for (let j = 0; j < children.length; j++) {
                result += stringifyElement(children[j]);
            }
            // Closing tag
            if (!collection_1.ListWrapper.contains(_singleTagWhitelist, tagName)) {
                result += `</${tagName}>`;
            }
        }
        else if (dom_adapter_1.DOM.isCommentNode(el)) {
            result += `<!--${dom_adapter_1.DOM.nodeValue(el)}-->`;
        }
        else {
            result += dom_adapter_1.DOM.getText(el);
        }
        return result;
    }
    exports_1("stringifyElement", stringifyElement);
    return {
        setters:[
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            }],
        execute: function() {
            class Log {
                constructor() {
                    this._result = [];
                }
                add(value) { this._result.push(value); }
                fn(value) {
                    return (a1 = null, a2 = null, a3 = null, a4 = null, a5 = null) => { this._result.push(value); };
                }
                clear() { this._result = []; }
                result() { return this._result.join("; "); }
            }
            Log = Log;
            class BrowserDetection {
                constructor(ua) {
                    if (lang_1.isPresent(ua)) {
                        this._ua = ua;
                    }
                    else {
                        this._ua = lang_1.isPresent(dom_adapter_1.DOM) ? dom_adapter_1.DOM.getUserAgent() : '';
                    }
                }
                get isFirefox() { return this._ua.indexOf('Firefox') > -1; }
                get isAndroid() {
                    return this._ua.indexOf('Mozilla/5.0') > -1 && this._ua.indexOf('Android') > -1 &&
                        this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Chrome') == -1;
                }
                get isEdge() { return this._ua.indexOf('Edge') > -1; }
                get isIE() { return this._ua.indexOf('Trident') > -1; }
                get isWebkit() {
                    return this._ua.indexOf('AppleWebKit') > -1 && this._ua.indexOf('Edge') == -1;
                }
                get isIOS7() {
                    return this._ua.indexOf('iPhone OS 7') > -1 || this._ua.indexOf('iPad OS 7') > -1;
                }
                get isSlow() { return this.isAndroid || this.isIE || this.isIOS7; }
                // The Intl API is only properly supported in recent Chrome and Opera.
                // Note: Edge is disguised as Chrome 42, so checking the "Edge" part is needed,
                // see https://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx
                get supportsIntlApi() {
                    return this._ua.indexOf('Chrome/4') > -1 && this._ua.indexOf('Edge') == -1;
                }
            }
            BrowserDetection = BrowserDetection;
            browserDetection = new BrowserDetection(null);
            var _RE_SPECIAL_CHARS = ['-', '[', ']', '/', '{', '}', '\\', '(', ')', '*', '+', '?', '.', '^', '$', '|'];
            var _ESCAPE_RE = lang_1.RegExpWrapper.create(`[\\${_RE_SPECIAL_CHARS.join('\\')}]`);
            var _singleTagWhitelist = ['br', 'hr', 'input'];
        }
    }
});
//# sourceMappingURL=utils.js.map