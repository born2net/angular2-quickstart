System.register(["angular2/src/core/facade/lang", 'angular2/src/core/facade/exceptions', "angular2/src/core/facade/collection", "angular2/src/core/render/api", 'angular2/src/web_workers/shared/api', "angular2/src/core/di"], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var lang_1, exceptions_1, collection_1, api_1, api_2, di_1;
    var PRIMITIVE, Serializer, RenderTemplateCmdSerializer, RENDER_TEMPLATE_CMD_SERIALIZER, RENDER_TEMPLATE_CMD_DESERIALIZERS;
    function serializeTemplateCmd(cmd) {
        return cmd.visit(RENDER_TEMPLATE_CMD_SERIALIZER, null);
    }
    function deserializeTemplateCmd(data) {
        return RENDER_TEMPLATE_CMD_DESERIALIZERS[data['deserializerIndex']](data);
    }
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (api_1_1) {
                api_1 = api_1_1;
            },
            function (api_2_1) {
                api_2 = api_2_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            }],
        execute: function() {
            // PRIMITIVE is any type that does not need to be serialized (string, number, boolean)
            // We set it to String so that it is considered a Type.
            PRIMITIVE = String;
            let Serializer = class {
                constructor(_protoViewStore, _renderViewStore) {
                    this._protoViewStore = _protoViewStore;
                    this._renderViewStore = _renderViewStore;
                }
                serialize(obj, type) {
                    if (!lang_1.isPresent(obj)) {
                        return null;
                    }
                    if (lang_1.isArray(obj)) {
                        return obj.map(v => this.serialize(v, type));
                    }
                    if (type == PRIMITIVE) {
                        return obj;
                    }
                    if (type == api_1.RenderProtoViewRef) {
                        return this._protoViewStore.serialize(obj);
                    }
                    else if (type == api_1.RenderViewRef) {
                        return this._renderViewStore.serializeRenderViewRef(obj);
                    }
                    else if (type == api_1.RenderFragmentRef) {
                        return this._renderViewStore.serializeRenderFragmentRef(obj);
                    }
                    else if (type == api_2.WebWorkerElementRef) {
                        return this._serializeWorkerElementRef(obj);
                    }
                    else if (type == api_2.WebWorkerTemplateCmd) {
                        return serializeTemplateCmd(obj);
                    }
                    else {
                        throw new exceptions_1.BaseException("No serializer for " + type.toString());
                    }
                }
                deserialize(map, type, data) {
                    if (!lang_1.isPresent(map)) {
                        return null;
                    }
                    if (lang_1.isArray(map)) {
                        var obj = [];
                        map.forEach(val => obj.push(this.deserialize(val, type, data)));
                        return obj;
                    }
                    if (type == PRIMITIVE) {
                        return map;
                    }
                    if (type == api_1.RenderProtoViewRef) {
                        return this._protoViewStore.deserialize(map);
                    }
                    else if (type == api_1.RenderViewRef) {
                        return this._renderViewStore.deserializeRenderViewRef(map);
                    }
                    else if (type == api_1.RenderFragmentRef) {
                        return this._renderViewStore.deserializeRenderFragmentRef(map);
                    }
                    else if (type == api_2.WebWorkerElementRef) {
                        return this._deserializeWorkerElementRef(map);
                    }
                    else if (type == api_2.WebWorkerTemplateCmd) {
                        return deserializeTemplateCmd(map);
                    }
                    else {
                        throw new exceptions_1.BaseException("No deserializer for " + type.toString());
                    }
                }
                mapToObject(map, type) {
                    var object = {};
                    var serialize = lang_1.isPresent(type);
                    map.forEach((value, key) => {
                        if (serialize) {
                            object[key] = this.serialize(value, type);
                        }
                        else {
                            object[key] = value;
                        }
                    });
                    return object;
                }
                /*
                 * Transforms a Javascript object (StringMap) into a Map<string, V>
                 * If the values need to be deserialized pass in their type
                 * and they will be deserialized before being placed in the map
                 */
                objectToMap(obj, type, data) {
                    if (lang_1.isPresent(type)) {
                        var map = new collection_1.Map();
                        collection_1.StringMapWrapper.forEach(obj, (val, key) => { map.set(key, this.deserialize(val, type, data)); });
                        return map;
                    }
                    else {
                        return collection_1.MapWrapper.createFromStringMap(obj);
                    }
                }
                allocateRenderViews(fragmentCount) { this._renderViewStore.allocate(fragmentCount); }
                _serializeWorkerElementRef(elementRef) {
                    return {
                        'renderView': this.serialize(elementRef.renderView, api_1.RenderViewRef),
                        'boundElementIndex': elementRef.boundElementIndex
                    };
                }
                _deserializeWorkerElementRef(map) {
                    return new api_2.WebWorkerElementRef(this.deserialize(map['renderView'], api_1.RenderViewRef), map['boundElementIndex']);
                }
            };
            Serializer = __decorate([
                di_1.Injectable()
            ], Serializer);
            Serializer = Serializer;
            class RenderTemplateCmdSerializer {
                visitText(cmd, context) {
                    return {
                        'deserializerIndex': 0,
                        'isBound': cmd.isBound,
                        'ngContentIndex': cmd.ngContentIndex,
                        'value': cmd.value
                    };
                }
                visitNgContent(cmd, context) {
                    return { 'deserializerIndex': 1, 'index': cmd.index, 'ngContentIndex': cmd.ngContentIndex };
                }
                visitBeginElement(cmd, context) {
                    return {
                        'deserializerIndex': 2,
                        'isBound': cmd.isBound,
                        'ngContentIndex': cmd.ngContentIndex,
                        'name': cmd.name,
                        'attrNameAndValues': cmd.attrNameAndValues,
                        'eventTargetAndNames': cmd.eventTargetAndNames
                    };
                }
                visitEndElement(context) { return { 'deserializerIndex': 3 }; }
                visitBeginComponent(cmd, context) {
                    return {
                        'deserializerIndex': 4,
                        'isBound': cmd.isBound,
                        'ngContentIndex': cmd.ngContentIndex,
                        'name': cmd.name,
                        'attrNameAndValues': cmd.attrNameAndValues,
                        'eventTargetAndNames': cmd.eventTargetAndNames,
                        'nativeShadow': cmd.nativeShadow,
                        'templateId': cmd.templateId
                    };
                }
                visitEndComponent(context) { return { 'deserializerIndex': 5 }; }
                visitEmbeddedTemplate(cmd, context) {
                    var children = cmd.children.map(child => child.visit(this, null));
                    return {
                        'deserializerIndex': 6,
                        'isBound': cmd.isBound,
                        'ngContentIndex': cmd.ngContentIndex,
                        'name': cmd.name,
                        'attrNameAndValues': cmd.attrNameAndValues,
                        'eventTargetAndNames': cmd.eventTargetAndNames,
                        'isMerged': cmd.isMerged,
                        'children': children
                    };
                }
            }
            var RENDER_TEMPLATE_CMD_SERIALIZER = new RenderTemplateCmdSerializer();
            var RENDER_TEMPLATE_CMD_DESERIALIZERS = [
                    (data) => new api_2.WebWorkerTextCmd(data['isBound'], data['ngContentIndex'], data['value']),
                    (data) => new api_2.WebWorkerNgContentCmd(data['index'], data['ngContentIndex']),
                    (data) => new api_2.WebWorkerBeginElementCmd(data['isBound'], data['ngContentIndex'], data['name'], data['attrNameAndValues'], data['eventTargetAndNames']),
                    (data) => new api_2.WebWorkerEndElementCmd(),
                    (data) => new api_2.WebWorkerBeginComponentCmd(data['isBound'], data['ngContentIndex'], data['name'], data['attrNameAndValues'], data['eventTargetAndNames'], data['nativeShadow'], data['templateId']),
                    (data) => new api_2.WebWorkerEndComponentCmd(),
                    (data) => new api_2.WebWorkerEmbeddedTemplateCmd(data['isBound'], data['ngContentIndex'], data['name'], data['attrNameAndValues'], data['eventTargetAndNames'], data['isMerged'], data['children'].map(childData => deserializeTemplateCmd(childData))),
            ];
        }
    }
});
//# sourceMappingURL=serializer.js.map