/*
 * This file is the entry point for the main thread
 * It takes care of spawning the worker and sending it the initial init message
 * It also acts and the messenger between the worker thread and the renderer running on the UI
 * thread
*/
System.register(["./di_bindings", 'angular2/src/core/application_ref', 'angular2/src/core/di', 'angular2/src/core/dom/browser_adapter', 'angular2/src/core/profile/wtf_init', 'angular2/src/web_workers/ui/setup', 'angular2/src/web_workers/ui/renderer', 'angular2/src/web_workers/ui/xhr_impl'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var di_bindings_1, application_ref_1, di_1, browser_adapter_1, wtf_init_1, setup_1, renderer_1, xhr_impl_1;
    var WebWorkerApplication;
    /**
     * Creates a zone, sets up the DI providers
     * And then creates a new WebWorkerMain object to handle messages from the worker
     */
    function bootstrapUICommon(bus) {
        browser_adapter_1.BrowserDomAdapter.makeCurrent();
        var zone = application_ref_1.createNgZone();
        wtf_init_1.wtfInit();
        bus.attachToZone(zone);
        return zone.run(() => {
            var injector = di_bindings_1.createInjector(zone, bus);
            injector.get(renderer_1.MessageBasedRenderer).start();
            injector.get(xhr_impl_1.MessageBasedXHRImpl).start();
            injector.get(setup_1.WebWorkerSetup).start();
            return injector.get(WebWorkerApplication);
        });
    }
    exports_1("bootstrapUICommon", bootstrapUICommon);
    return {
        setters:[
            function (di_bindings_1_1) {
                di_bindings_1 = di_bindings_1_1;
            },
            function (application_ref_1_1) {
                application_ref_1 = application_ref_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (browser_adapter_1_1) {
                browser_adapter_1 = browser_adapter_1_1;
            },
            function (wtf_init_1_1) {
                wtf_init_1 = wtf_init_1_1;
            },
            function (setup_1_1) {
                setup_1 = setup_1_1;
            },
            function (renderer_1_1) {
                renderer_1 = renderer_1_1;
            },
            function (xhr_impl_1_1) {
                xhr_impl_1 = xhr_impl_1_1;
            }],
        execute: function() {
            let WebWorkerApplication = class {
                constructor(_clientMessageBrokerFactory, _serviceMessageBrokerFactory) {
                    this._clientMessageBrokerFactory = _clientMessageBrokerFactory;
                    this._serviceMessageBrokerFactory = _serviceMessageBrokerFactory;
                }
                createClientMessageBroker(channel, runInZone = true) {
                    return this._clientMessageBrokerFactory.createMessageBroker(channel, runInZone);
                }
                createServiceMessageBroker(channel, runInZone = true) {
                    return this._serviceMessageBrokerFactory.createMessageBroker(channel, runInZone);
                }
            };
            WebWorkerApplication = __decorate([
                di_1.Injectable()
            ], WebWorkerApplication);
            WebWorkerApplication = WebWorkerApplication;
        }
    }
});
//# sourceMappingURL=impl.js.map