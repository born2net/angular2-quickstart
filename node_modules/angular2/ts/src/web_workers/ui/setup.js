System.register(['angular2/src/web_workers/shared/messaging_api', 'angular2/src/core/facade/async', 'angular2/src/core/facade/lang', 'angular2/src/core/di'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var messaging_api_1, async_1, lang_1, di_1;
    var WebWorkerSetup;
    return {
        setters:[
            function (messaging_api_1_1) {
                messaging_api_1 = messaging_api_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            }],
        execute: function() {
            let WebWorkerSetup = class {
                constructor(_bus, anchorBasedAppRootUrl) {
                    this._bus = _bus;
                    this.rootUrl = anchorBasedAppRootUrl.value;
                }
                start() {
                    this._bus.initChannel(messaging_api_1.SETUP_CHANNEL, false);
                    var sink = this._bus.to(messaging_api_1.SETUP_CHANNEL);
                    var source = this._bus.from(messaging_api_1.SETUP_CHANNEL);
                    async_1.ObservableWrapper.subscribe(source, (message) => {
                        if (lang_1.StringWrapper.equals(message, "ready")) {
                            async_1.ObservableWrapper.callNext(sink, { "rootUrl": this.rootUrl });
                        }
                    });
                }
            };
            WebWorkerSetup = __decorate([
                di_1.Injectable()
            ], WebWorkerSetup);
            WebWorkerSetup = WebWorkerSetup;
        }
    }
});
//# sourceMappingURL=setup.js.map