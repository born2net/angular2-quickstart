System.register(['angular2/src/core/di', 'angular2/src/animate/animation_builder', 'angular2/src/animate/css_animation_builder', 'angular2/src/animate/animation', 'angular2/src/animate/browser_details'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var di_1, animation_builder_1, css_animation_builder_1, animation_1, browser_details_1;
    var MockAnimationBuilder, MockCssAnimationBuilder, MockBrowserAbstraction, MockAnimation;
    return {
        setters:[
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (animation_builder_1_1) {
                animation_builder_1 = animation_builder_1_1;
            },
            function (css_animation_builder_1_1) {
                css_animation_builder_1 = css_animation_builder_1_1;
            },
            function (animation_1_1) {
                animation_1 = animation_1_1;
            },
            function (browser_details_1_1) {
                browser_details_1 = browser_details_1_1;
            }],
        execute: function() {
            let MockAnimationBuilder = class extends animation_builder_1.AnimationBuilder {
                constructor() {
                    super(null);
                }
                css() { return new MockCssAnimationBuilder(); }
            };
            MockAnimationBuilder = __decorate([
                di_1.Injectable()
            ], MockAnimationBuilder);
            MockAnimationBuilder = MockAnimationBuilder;
            class MockCssAnimationBuilder extends css_animation_builder_1.CssAnimationBuilder {
                constructor() {
                    super(null);
                }
                start(element) { return new MockAnimation(element, this.data); }
            }
            class MockBrowserAbstraction extends browser_details_1.BrowserDetails {
                doesElapsedTimeIncludesDelay() { this.elapsedTimeIncludesDelay = false; }
            }
            class MockAnimation extends animation_1.Animation {
                constructor(element, data) {
                    super(element, data, new MockBrowserAbstraction());
                }
                wait(callback) { this._callback = callback; }
                flush() {
                    this._callback(0);
                    this._callback = null;
                }
            }
        }
    }
});
//# sourceMappingURL=animation_builder_mock.js.map