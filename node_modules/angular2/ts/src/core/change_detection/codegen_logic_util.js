System.register(['angular2/src/core/facade/lang', './codegen_facade', './proto_record', './constants', 'angular2/src/core/facade/exceptions'], function(exports_1) {
    var lang_1, codegen_facade_1, proto_record_1, constants_1, exceptions_1;
    var CodegenLogicUtil;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (codegen_facade_1_1) {
                codegen_facade_1 = codegen_facade_1_1;
            },
            function (proto_record_1_1) {
                proto_record_1 = proto_record_1_1;
            },
            function (constants_1_1) {
                constants_1 = constants_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            /**
             * Class responsible for providing change detection logic for change detector classes.
             */
            class CodegenLogicUtil {
                constructor(_names, _utilName, _changeDetection) {
                    this._names = _names;
                    this._utilName = _utilName;
                    this._changeDetection = _changeDetection;
                }
                /**
                 * Generates a statement which updates the local variable representing `protoRec` with the current
                 * value of the record. Used by property bindings.
                 */
                genPropertyBindingEvalValue(protoRec) {
                    return this._genEvalValue(protoRec, idx => this._names.getLocalName(idx), this._names.getLocalsAccessorName());
                }
                /**
                 * Generates a statement which updates the local variable representing `protoRec` with the current
                 * value of the record. Used by event bindings.
                 */
                genEventBindingEvalValue(eventRecord, protoRec) {
                    return this._genEvalValue(protoRec, idx => this._names.getEventLocalName(eventRecord, idx), "locals");
                }
                _genEvalValue(protoRec, getLocalName, localsAccessor) {
                    var context = (protoRec.contextIndex == -1) ?
                        this._names.getDirectiveName(protoRec.directiveIndex) :
                        getLocalName(protoRec.contextIndex);
                    var argString = protoRec.args.map(arg => getLocalName(arg)).join(", ");
                    var rhs;
                    switch (protoRec.mode) {
                        case proto_record_1.RecordType.Self:
                            rhs = context;
                            break;
                        case proto_record_1.RecordType.Const:
                            rhs = codegen_facade_1.codify(protoRec.funcOrValue);
                            break;
                        case proto_record_1.RecordType.PropertyRead:
                            rhs = this._observe(`${context}.${protoRec.name}`, protoRec);
                            break;
                        case proto_record_1.RecordType.SafeProperty:
                            var read = this._observe(`${context}.${protoRec.name}`, protoRec);
                            rhs =
                                `${this._utilName}.isValueBlank(${context}) ? null : ${this._observe(read, protoRec)}`;
                            break;
                        case proto_record_1.RecordType.PropertyWrite:
                            rhs = `${context}.${protoRec.name} = ${getLocalName(protoRec.args[0])}`;
                            break;
                        case proto_record_1.RecordType.Local:
                            rhs = this._observe(`${localsAccessor}.get(${codegen_facade_1.rawString(protoRec.name)})`, protoRec);
                            break;
                        case proto_record_1.RecordType.InvokeMethod:
                            rhs = this._observe(`${context}.${protoRec.name}(${argString})`, protoRec);
                            break;
                        case proto_record_1.RecordType.SafeMethodInvoke:
                            var invoke = `${context}.${protoRec.name}(${argString})`;
                            rhs =
                                `${this._utilName}.isValueBlank(${context}) ? null : ${this._observe(invoke, protoRec)}`;
                            break;
                        case proto_record_1.RecordType.InvokeClosure:
                            rhs = `${context}(${argString})`;
                            break;
                        case proto_record_1.RecordType.PrimitiveOp:
                            rhs = `${this._utilName}.${protoRec.name}(${argString})`;
                            break;
                        case proto_record_1.RecordType.CollectionLiteral:
                            rhs = `${this._utilName}.${protoRec.name}(${argString})`;
                            break;
                        case proto_record_1.RecordType.Interpolate:
                            rhs = this._genInterpolation(protoRec);
                            break;
                        case proto_record_1.RecordType.KeyedRead:
                            rhs = this._observe(`${context}[${getLocalName(protoRec.args[0])}]`, protoRec);
                            break;
                        case proto_record_1.RecordType.KeyedWrite:
                            rhs = `${context}[${getLocalName(protoRec.args[0])}] = ${getLocalName(protoRec.args[1])}`;
                            break;
                        case proto_record_1.RecordType.Chain:
                            rhs = 'null';
                            break;
                        default:
                            throw new exceptions_1.BaseException(`Unknown operation ${protoRec.mode}`);
                    }
                    return `${getLocalName(protoRec.selfIndex)} = ${rhs};`;
                }
                /** @internal */
                _observe(exp, rec) {
                    // This is an experimental feature. Works only in Dart.
                    if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
                        return `this.observeValue(${exp}, ${rec.selfIndex})`;
                    }
                    else {
                        return exp;
                    }
                }
                genPropertyBindingTargets(propertyBindingTargets, genDebugInfo) {
                    var bs = propertyBindingTargets.map(b => {
                        if (lang_1.isBlank(b))
                            return "null";
                        var debug = genDebugInfo ? codegen_facade_1.codify(b.debug) : "null";
                        return `${this._utilName}.bindingTarget(${codegen_facade_1.codify(b.mode)}, ${b.elementIndex}, ${codegen_facade_1.codify(b.name)}, ${codegen_facade_1.codify(b.unit)}, ${debug})`;
                    });
                    return `[${bs.join(", ")}]`;
                }
                genDirectiveIndices(directiveRecords) {
                    var bs = directiveRecords.map(b => `${this._utilName}.directiveIndex(${b.directiveIndex.elementIndex}, ${b.directiveIndex.directiveIndex})`);
                    return `[${bs.join(", ")}]`;
                }
                /** @internal */
                _genInterpolation(protoRec) {
                    var iVals = [];
                    for (var i = 0; i < protoRec.args.length; ++i) {
                        iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[i]));
                        iVals.push(`${this._utilName}.s(${this._names.getLocalName(protoRec.args[i])})`);
                    }
                    iVals.push(codegen_facade_1.codify(protoRec.fixedArgs[protoRec.args.length]));
                    return codegen_facade_1.combineGeneratedStrings(iVals);
                }
                genHydrateDirectives(directiveRecords) {
                    var res = [];
                    for (var i = 0; i < directiveRecords.length; ++i) {
                        var r = directiveRecords[i];
                        res.push(`${this._names.getDirectiveName(r.directiveIndex)} = ${this._genReadDirective(i)};`);
                    }
                    return res.join("\n");
                }
                _genReadDirective(index) {
                    // This is an experimental feature. Works only in Dart.
                    if (this._changeDetection === constants_1.ChangeDetectionStrategy.OnPushObserve) {
                        return `this.observeDirective(this.getDirectiveFor(directives, ${index}), ${index})`;
                    }
                    else {
                        return `this.getDirectiveFor(directives, ${index})`;
                    }
                }
                genHydrateDetectors(directiveRecords) {
                    var res = [];
                    for (var i = 0; i < directiveRecords.length; ++i) {
                        var r = directiveRecords[i];
                        if (!r.isDefaultChangeDetection()) {
                            res.push(`${this._names.getDetectorName(r.directiveIndex)} = this.getDetectorFor(directives, ${i});`);
                        }
                    }
                    return res.join("\n");
                }
                genContentLifecycleCallbacks(directiveRecords) {
                    var res = [];
                    // NOTE(kegluneq): Order is important!
                    for (var i = directiveRecords.length - 1; i >= 0; --i) {
                        var dir = directiveRecords[i];
                        if (dir.callAfterContentInit) {
                            res.push(`if(! ${this._names.getAlreadyCheckedName()}) ${this._names.getDirectiveName(dir.directiveIndex)}.afterContentInit();`);
                        }
                        if (dir.callAfterContentChecked) {
                            res.push(`${this._names.getDirectiveName(dir.directiveIndex)}.afterContentChecked();`);
                        }
                    }
                    return res;
                }
                genViewLifecycleCallbacks(directiveRecords) {
                    var res = [];
                    // NOTE(kegluneq): Order is important!
                    for (var i = directiveRecords.length - 1; i >= 0; --i) {
                        var dir = directiveRecords[i];
                        if (dir.callAfterViewInit) {
                            res.push(`if(! ${this._names.getAlreadyCheckedName()}) ${this._names.getDirectiveName(dir.directiveIndex)}.afterViewInit();`);
                        }
                        if (dir.callAfterViewChecked) {
                            res.push(`${this._names.getDirectiveName(dir.directiveIndex)}.afterViewChecked();`);
                        }
                    }
                    return res;
                }
            }
            CodegenLogicUtil = CodegenLogicUtil;
        }
    }
});
//# sourceMappingURL=codegen_logic_util.js.map