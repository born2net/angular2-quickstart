System.register(["angular2/src/core/facade/exceptions"], function(exports_1) {
    var exceptions_1;
    var ExpressionChangedAfterItHasBeenCheckedException, ChangeDetectionError, DehydratedException;
    return {
        setters:[
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            /**
             * An error thrown if application changes model breaking the top-down data flow.
             *
             * This exception is only thrown in dev mode.
             *
             * <!-- TODO: Add a link once the dev mode option is configurable -->
             *
             * ### Example
             *
             * ```typescript
             * @Component({
             *   selector: 'parent',
             *   template: `
             *     <child [prop]="parentProp"></child>
             *   `,
             *   directives: [forwardRef(() => Child)]
             * })
             * class Parent {
             *   parentProp = "init";
             * }
             *
             * @Directive({selector: 'child', inputs: ['prop']})
             * class Child {
             *   constructor(public parent: Parent) {}
             *
             *   set prop(v) {
             *     // this updates the parent property, which is disallowed during change detection
             *     // this will result in ExpressionChangedAfterItHasBeenCheckedException
             *     this.parent.parentProp = "updated";
             *   }
             * }
             * ```
             */
            class ExpressionChangedAfterItHasBeenCheckedException extends exceptions_1.BaseException {
                constructor(exp, oldValue, currValue, context) {
                    super(`Expression '${exp}' has changed after it was checked. ` +
                        `Previous value: '${oldValue}'. Current value: '${currValue}'`);
                }
            }
            ExpressionChangedAfterItHasBeenCheckedException = ExpressionChangedAfterItHasBeenCheckedException;
            /**
             * Thrown when an expression evaluation raises an exception.
             *
             * This error wraps the original exception to attach additional contextual information that can
             * be useful for debugging.
             *
             * ### Example ([live demo](http://plnkr.co/edit/2Kywoz?p=preview))
             *
             * ```typescript
             * @Directive({selector: 'child', inputs: ['prop']})
             * class Child {
             *   prop;
             * }
             *
             * @Component({
             *   selector: 'app',
             *   template: `
             *     <child [prop]="field.first"></child>
             *   `,
             *   directives: [Child]
             * })
             * class App {
             *   field = null;
             * }
             *
             * bootstrap(App);
             * ```
             *
             * You can access the original exception and stack through the `originalException` and
             * `originalStack` properties.
             */
            class ChangeDetectionError extends exceptions_1.WrappedException {
                constructor(exp, originalException, originalStack, context) {
                    super(`${originalException} in [${exp}]`, originalException, originalStack, context);
                    this.location = exp;
                }
            }
            ChangeDetectionError = ChangeDetectionError;
            /**
             * Thrown when change detector executes on dehydrated view.
             *
             * This error indicates a bug in the framework.
             *
             * This is an internal Angular error.
             */
            class DehydratedException extends exceptions_1.BaseException {
                constructor() {
                    super('Attempt to detect changes on a dehydrated detector.');
                }
            }
            DehydratedException = DehydratedException;
        }
    }
});
//# sourceMappingURL=exceptions.js.map