System.register(['angular2/src/core/di/decorators', "angular2/src/core/facade/collection", "angular2/src/core/facade/lang", 'angular2/src/core/facade/exceptions'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var decorators_1, collection_1, lang_1, exceptions_1;
    var TokenType, Lexer, Token, EOF, $EOF, $TAB, $LF, $VTAB, $FF, $CR, $SPACE, $BANG, $DQ, $HASH, $$, $PERCENT, $AMPERSAND, $SQ, $LPAREN, $RPAREN, $STAR, $PLUS, $COMMA, $MINUS, $PERIOD, $SLASH, $COLON, $SEMICOLON, $LT, $EQ, $GT, $QUESTION, $0, $9, $A, $E, $Z, $LBRACKET, $BACKSLASH, $RBRACKET, $CARET, $_, $a, $e, $f, $n, $r, $t, $u, $v, $z, $LBRACE, $BAR, $RBRACE, $NBSP, ScannerError, _Scanner, OPERATORS, KEYWORDS;
    function newCharacterToken(index, code) {
        return new Token(index, TokenType.Character, code, lang_1.StringWrapper.fromCharCode(code));
    }
    function newIdentifierToken(index, text) {
        return new Token(index, TokenType.Identifier, 0, text);
    }
    function newKeywordToken(index, text) {
        return new Token(index, TokenType.Keyword, 0, text);
    }
    function newOperatorToken(index, text) {
        return new Token(index, TokenType.Operator, 0, text);
    }
    function newStringToken(index, text) {
        return new Token(index, TokenType.String, 0, text);
    }
    function newNumberToken(index, n) {
        return new Token(index, TokenType.Number, n, "");
    }
    function isWhitespace(code) {
        return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
    }
    function isIdentifierStart(code) {
        return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == $$);
    }
    function isIdentifierPart(code) {
        return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) ||
            (code == $_) || (code == $$);
    }
    function isDigit(code) {
        return $0 <= code && code <= $9;
    }
    function isExponentStart(code) {
        return code == $e || code == $E;
    }
    function isExponentSign(code) {
        return code == $MINUS || code == $PLUS;
    }
    function unescape(code) {
        switch (code) {
            case $n:
                return $LF;
            case $f:
                return $FF;
            case $r:
                return $CR;
            case $t:
                return $TAB;
            case $v:
                return $VTAB;
            default:
                return code;
        }
    }
    return {
        setters:[
            function (decorators_1_1) {
                decorators_1 = decorators_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            (function (TokenType) {
                TokenType[TokenType["Character"] = 0] = "Character";
                TokenType[TokenType["Identifier"] = 1] = "Identifier";
                TokenType[TokenType["Keyword"] = 2] = "Keyword";
                TokenType[TokenType["String"] = 3] = "String";
                TokenType[TokenType["Operator"] = 4] = "Operator";
                TokenType[TokenType["Number"] = 5] = "Number";
            })(TokenType || (TokenType = {}));
            var TokenType = TokenType;
            exports_1("TokenType", TokenType);
            let Lexer = class {
                tokenize(text) {
                    var scanner = new _Scanner(text);
                    var tokens = [];
                    var token = scanner.scanToken();
                    while (token != null) {
                        tokens.push(token);
                        token = scanner.scanToken();
                    }
                    return tokens;
                }
            };
            Lexer = __decorate([
                decorators_1.Injectable()
            ], Lexer);
            Lexer = Lexer;
            class Token {
                constructor(index, type, numValue, strValue) {
                    this.index = index;
                    this.type = type;
                    this.numValue = numValue;
                    this.strValue = strValue;
                }
                isCharacter(code) {
                    return (this.type == TokenType.Character && this.numValue == code);
                }
                isNumber() { return (this.type == TokenType.Number); }
                isString() { return (this.type == TokenType.String); }
                isOperator(operater) {
                    return (this.type == TokenType.Operator && this.strValue == operater);
                }
                isIdentifier() { return (this.type == TokenType.Identifier); }
                isKeyword() { return (this.type == TokenType.Keyword); }
                isKeywordVar() { return (this.type == TokenType.Keyword && this.strValue == "var"); }
                isKeywordNull() { return (this.type == TokenType.Keyword && this.strValue == "null"); }
                isKeywordUndefined() {
                    return (this.type == TokenType.Keyword && this.strValue == "undefined");
                }
                isKeywordTrue() { return (this.type == TokenType.Keyword && this.strValue == "true"); }
                isKeywordIf() { return (this.type == TokenType.Keyword && this.strValue == "if"); }
                isKeywordElse() { return (this.type == TokenType.Keyword && this.strValue == "else"); }
                isKeywordFalse() { return (this.type == TokenType.Keyword && this.strValue == "false"); }
                toNumber() {
                    // -1 instead of NULL ok?
                    return (this.type == TokenType.Number) ? this.numValue : -1;
                }
                toString() {
                    switch (this.type) {
                        case TokenType.Character:
                        case TokenType.Identifier:
                        case TokenType.Keyword:
                        case TokenType.Operator:
                        case TokenType.String:
                            return this.strValue;
                        case TokenType.Number:
                            return this.numValue.toString();
                        default:
                            return null;
                    }
                }
            }
            Token = Token;
            EOF = new Token(-1, TokenType.Character, 0, "");
            $EOF = 0;
            $TAB = 9;
            $LF = 10;
            $VTAB = 11;
            $FF = 12;
            $CR = 13;
            $SPACE = 32;
            $BANG = 33;
            $DQ = 34;
            $HASH = 35;
            $$ = 36;
            $PERCENT = 37;
            $AMPERSAND = 38;
            $SQ = 39;
            $LPAREN = 40;
            $RPAREN = 41;
            $STAR = 42;
            $PLUS = 43;
            $COMMA = 44;
            $MINUS = 45;
            $PERIOD = 46;
            $SLASH = 47;
            $COLON = 58;
            $SEMICOLON = 59;
            $LT = 60;
            $EQ = 61;
            $GT = 62;
            $QUESTION = 63;
            const $0 = 48;
            const $9 = 57;
            const $A = 65, $E = 69, $Z = 90;
            $LBRACKET = 91;
            $BACKSLASH = 92;
            $RBRACKET = 93;
            const $CARET = 94;
            const $_ = 95;
            const $a = 97, $e = 101, $f = 102, $n = 110, $r = 114, $t = 116, $u = 117, $v = 118, $z = 122;
            $LBRACE = 123;
            $BAR = 124;
            $RBRACE = 125;
            const $NBSP = 160;
            class ScannerError extends exceptions_1.BaseException {
                constructor(message) {
                    super();
                    this.message = message;
                }
                toString() { return this.message; }
            }
            ScannerError = ScannerError;
            class _Scanner {
                constructor(input) {
                    this.input = input;
                    this.peek = 0;
                    this.index = -1;
                    this.length = input.length;
                    this.advance();
                }
                advance() {
                    this.peek =
                        ++this.index >= this.length ? $EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
                }
                scanToken() {
                    var input = this.input, length = this.length, peek = this.peek, index = this.index;
                    // Skip whitespace.
                    while (peek <= $SPACE) {
                        if (++index >= length) {
                            peek = $EOF;
                            break;
                        }
                        else {
                            peek = lang_1.StringWrapper.charCodeAt(input, index);
                        }
                    }
                    this.peek = peek;
                    this.index = index;
                    if (index >= length) {
                        return null;
                    }
                    // Handle identifiers and numbers.
                    if (isIdentifierStart(peek))
                        return this.scanIdentifier();
                    if (isDigit(peek))
                        return this.scanNumber(index);
                    var start = index;
                    switch (peek) {
                        case $PERIOD:
                            this.advance();
                            return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
                        case $LPAREN:
                        case $RPAREN:
                        case $LBRACE:
                        case $RBRACE:
                        case $LBRACKET:
                        case $RBRACKET:
                        case $COMMA:
                        case $COLON:
                        case $SEMICOLON:
                            return this.scanCharacter(start, peek);
                        case $SQ:
                        case $DQ:
                            return this.scanString();
                        case $HASH:
                        case $PLUS:
                        case $MINUS:
                        case $STAR:
                        case $SLASH:
                        case $PERCENT:
                        case $CARET:
                            return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
                        case $QUESTION:
                            return this.scanComplexOperator(start, '?', $PERIOD, '.');
                        case $LT:
                        case $GT:
                            return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), $EQ, '=');
                        case $BANG:
                        case $EQ:
                            return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), $EQ, '=', $EQ, '=');
                        case $AMPERSAND:
                            return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
                        case $BAR:
                            return this.scanComplexOperator(start, '|', $BAR, '|');
                        case $NBSP:
                            while (isWhitespace(this.peek))
                                this.advance();
                            return this.scanToken();
                    }
                    this.error(`Unexpected character [${lang_1.StringWrapper.fromCharCode(peek)}]`, 0);
                    return null;
                }
                scanCharacter(start, code) {
                    assert(this.peek == code);
                    this.advance();
                    return newCharacterToken(start, code);
                }
                scanOperator(start, str) {
                    assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
                    assert(collection_1.SetWrapper.has(OPERATORS, str));
                    this.advance();
                    return newOperatorToken(start, str);
                }
                /**
                 * Tokenize a 2/3 char long operator
                 *
                 * @param start start index in the expression
                 * @param one first symbol (always part of the operator)
                 * @param twoCode code point for the second symbol
                 * @param two second symbol (part of the operator when the second code point matches)
                 * @param threeCode code point for the third symbol
                 * @param three third symbol (part of the operator when provided and matches source expression)
                 * @returns {Token}
                 */
                scanComplexOperator(start, one, twoCode, two, threeCode, three) {
                    assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
                    this.advance();
                    var str = one;
                    if (this.peek == twoCode) {
                        this.advance();
                        str += two;
                    }
                    if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
                        this.advance();
                        str += three;
                    }
                    assert(collection_1.SetWrapper.has(OPERATORS, str));
                    return newOperatorToken(start, str);
                }
                scanIdentifier() {
                    assert(isIdentifierStart(this.peek));
                    var start = this.index;
                    this.advance();
                    while (isIdentifierPart(this.peek))
                        this.advance();
                    var str = this.input.substring(start, this.index);
                    if (collection_1.SetWrapper.has(KEYWORDS, str)) {
                        return newKeywordToken(start, str);
                    }
                    else {
                        return newIdentifierToken(start, str);
                    }
                }
                scanNumber(start) {
                    assert(isDigit(this.peek));
                    var simple = (this.index === start);
                    this.advance(); // Skip initial digit.
                    while (true) {
                        if (isDigit(this.peek)) {
                        }
                        else if (this.peek == $PERIOD) {
                            simple = false;
                        }
                        else if (isExponentStart(this.peek)) {
                            this.advance();
                            if (isExponentSign(this.peek))
                                this.advance();
                            if (!isDigit(this.peek))
                                this.error('Invalid exponent', -1);
                            simple = false;
                        }
                        else {
                            break;
                        }
                        this.advance();
                    }
                    var str = this.input.substring(start, this.index);
                    // TODO
                    var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
                    return newNumberToken(start, value);
                }
                scanString() {
                    assert(this.peek == $SQ || this.peek == $DQ);
                    var start = this.index;
                    var quote = this.peek;
                    this.advance(); // Skip initial quote.
                    var buffer;
                    var marker = this.index;
                    var input = this.input;
                    while (this.peek != quote) {
                        if (this.peek == $BACKSLASH) {
                            if (buffer == null)
                                buffer = new lang_1.StringJoiner();
                            buffer.add(input.substring(marker, this.index));
                            this.advance();
                            var unescapedCode;
                            if (this.peek == $u) {
                                // 4 character hex code for unicode character.
                                var hex = input.substring(this.index + 1, this.index + 5);
                                try {
                                    unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
                                }
                                catch (e) {
                                    this.error(`Invalid unicode escape [\\u${hex}]`, 0);
                                }
                                for (var i = 0; i < 5; i++) {
                                    this.advance();
                                }
                            }
                            else {
                                unescapedCode = unescape(this.peek);
                                this.advance();
                            }
                            buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
                            marker = this.index;
                        }
                        else if (this.peek == $EOF) {
                            this.error('Unterminated quote', 0);
                        }
                        else {
                            this.advance();
                        }
                    }
                    var last = input.substring(marker, this.index);
                    this.advance(); // Skip terminating quote.
                    // Compute the unescaped string value.
                    var unescaped = last;
                    if (buffer != null) {
                        buffer.add(last);
                        unescaped = buffer.toString();
                    }
                    return newStringToken(start, unescaped);
                }
                error(message, offset) {
                    var position = this.index + offset;
                    throw new ScannerError(`Lexer Error: ${message} at column ${position} in expression [${this.input}]`);
                }
            }
            var OPERATORS = collection_1.SetWrapper.createFromList([
                '+',
                '-',
                '*',
                '/',
                '%',
                '^',
                '=',
                '==',
                '!=',
                '===',
                '!==',
                '<',
                '>',
                '<=',
                '>=',
                '&&',
                '||',
                '&',
                '|',
                '!',
                '?',
                '#',
                '?.'
            ]);
            var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);
        }
    }
});
//# sourceMappingURL=lexer.js.map