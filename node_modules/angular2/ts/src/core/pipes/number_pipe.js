System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/exceptions', 'angular2/src/core/facade/intl', 'angular2/src/core/di', 'angular2/src/core/metadata', 'angular2/src/core/facade/collection', './invalid_pipe_argument_exception'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var lang_1, exceptions_1, intl_1, di_1, metadata_1, collection_1, invalid_pipe_argument_exception_1;
    var defaultLocale, _re, NumberPipe, DecimalPipe, PercentPipe, CurrencyPipe;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (intl_1_1) {
                intl_1 = intl_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            }],
        execute: function() {
            var defaultLocale = 'en-US';
            var _re = lang_1.RegExpWrapper.create('^(\\d+)?\\.((\\d+)(\\-(\\d+))?)?$');
            let NumberPipe = class {
                static _format(value, style, digits, currency = null, currencyAsSymbol = false) {
                    if (lang_1.isBlank(value))
                        return null;
                    if (!lang_1.isNumber(value)) {
                        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(NumberPipe, value);
                    }
                    var minInt = 1, minFraction = 0, maxFraction = 3;
                    if (lang_1.isPresent(digits)) {
                        var parts = lang_1.RegExpWrapper.firstMatch(_re, digits);
                        if (lang_1.isBlank(parts)) {
                            throw new exceptions_1.BaseException(`${digits} is not a valid digit info for number pipes`);
                        }
                        if (lang_1.isPresent(parts[1])) {
                            minInt = lang_1.NumberWrapper.parseIntAutoRadix(parts[1]);
                        }
                        if (lang_1.isPresent(parts[3])) {
                            minFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[3]);
                        }
                        if (lang_1.isPresent(parts[5])) {
                            maxFraction = lang_1.NumberWrapper.parseIntAutoRadix(parts[5]);
                        }
                    }
                    return intl_1.NumberFormatter.format(value, defaultLocale, style, {
                        minimumIntegerDigits: minInt,
                        minimumFractionDigits: minFraction,
                        maximumFractionDigits: maxFraction,
                        currency: currency,
                        currencyAsSymbol: currencyAsSymbol
                    });
                }
            };
            NumberPipe = __decorate([
                lang_1.CONST(),
                di_1.Injectable()
            ], NumberPipe);
            NumberPipe = NumberPipe;
            /**
             * WARNING: this pipe uses the Internationalization API.
             * Therefore it is only reliable in Chrome and Opera browsers.
             *
             * Formats a number as local text. i.e. group sizing and separator and other locale-specific
             * configurations are based on the active locale.
             *
             * # Usage
             *
             *     expression | number[:digitInfo]
             *
             * where `expression` is a number and `digitInfo` has the following format:
             *
             *     {minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}
             *
             * - minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.
             * - minFractionDigits is the minimum number of digits after fraction. Defaults to 0.
             * - maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.
             *
             * For more information on the acceptable range for each of these numbers and other
             * details see your native internationalization library.
             *
             * # Examples
             *
             *     {{ 123 | number }}              // output is 123
             *     {{ 123.1 | number: '.2-3' }}    // output is 123.10
             *     {{ 1 | number: '2.2' }}         // output is 01.00
             */
            let DecimalPipe = class extends NumberPipe {
                transform(value, args) {
                    var digits = collection_1.ListWrapper.first(args);
                    return NumberPipe._format(value, intl_1.NumberFormatStyle.Decimal, digits);
                }
            };
            DecimalPipe = __decorate([
                lang_1.CONST(),
                metadata_1.Pipe({ name: 'number' }),
                di_1.Injectable()
            ], DecimalPipe);
            DecimalPipe = DecimalPipe;
            /**
             * WARNING: this pipe uses the Internationalization API.
             * Therefore it is only reliable in Chrome and Opera browsers.
             *
             * Formats a number as local percent.
             *
             * # Usage
             *
             *     expression | percent[:digitInfo]
             *
             * For more information about `digitInfo` see {@link DecimalPipe}
             */
            let PercentPipe = class extends NumberPipe {
                transform(value, args) {
                    var digits = collection_1.ListWrapper.first(args);
                    return NumberPipe._format(value, intl_1.NumberFormatStyle.Percent, digits);
                }
            };
            PercentPipe = __decorate([
                lang_1.CONST(),
                metadata_1.Pipe({ name: 'percent' }),
                di_1.Injectable()
            ], PercentPipe);
            PercentPipe = PercentPipe;
            /**
             * WARNING: this pipe uses the Internationalization API.
             * Therefore it is only reliable in Chrome and Opera browsers.
             *
             * Formats a number as local currency.
             *
             * # Usage
             *
             *     expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]
             *
             * where `currencyCode` is the ISO 4217 currency code, such as "USD" for the US dollar and
             * "EUR" for the euro. `symbolDisplay` is a boolean indicating whether to use the currency
             * symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value
             * is `false`.
             * For more information about `digitInfo` see {@link DecimalPipe}
             */
            let CurrencyPipe = class extends NumberPipe {
                transform(value, args) {
                    var currencyCode = lang_1.isPresent(args) && args.length > 0 ? args[0] : 'USD';
                    var symbolDisplay = lang_1.isPresent(args) && args.length > 1 ? args[1] : false;
                    var digits = lang_1.isPresent(args) && args.length > 2 ? args[2] : null;
                    return NumberPipe._format(value, intl_1.NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
                }
            };
            CurrencyPipe = __decorate([
                lang_1.CONST(),
                metadata_1.Pipe({ name: 'currency' }),
                di_1.Injectable()
            ], CurrencyPipe);
            CurrencyPipe = CurrencyPipe;
        }
    }
});
//# sourceMappingURL=number_pipe.js.map