System.register(['angular2/src/core/facade/lang', 'angular2/src/core/di', 'angular2/src/core/metadata', './invalid_pipe_argument_exception'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var lang_1, di_1, metadata_1, invalid_pipe_argument_exception_1;
    var LowerCasePipe;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (invalid_pipe_argument_exception_1_1) {
                invalid_pipe_argument_exception_1 = invalid_pipe_argument_exception_1_1;
            }],
        execute: function() {
            /**
             * Implements lowercase transforms to text.
             *
             * # Example
             *
             * In this example we transform the user text lowercase.
             *
             *  ```
             * @Component({
             *   selector: "username-cmp",
             *   template: "Username: {{ user | lowercase }}"
             * })
             * class Username {
             *   user:string;
             * }
             *
             * ```
             */
            let LowerCasePipe = class {
                transform(value, args = null) {
                    if (lang_1.isBlank(value))
                        return value;
                    if (!lang_1.isString(value)) {
                        throw new invalid_pipe_argument_exception_1.InvalidPipeArgumentException(LowerCasePipe, value);
                    }
                    return lang_1.StringWrapper.toLowerCase(value);
                }
            };
            LowerCasePipe = __decorate([
                lang_1.CONST(),
                metadata_1.Pipe({ name: 'lowercase' }),
                di_1.Injectable()
            ], LowerCasePipe);
            LowerCasePipe = LowerCasePipe;
        }
    }
});
//# sourceMappingURL=lowercase_pipe.js.map