System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/exceptions', 'angular2/src/core/facade/collection', 'angular2/src/core/dom/dom_adapter', 'angular2/src/core/di'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var lang_1, exceptions_1, collection_1, dom_adapter_1, di_1;
    var EVENT_MANAGER_PLUGINS, EventManager, EventManagerPlugin, DomEventsPlugin;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            }],
        execute: function() {
            EVENT_MANAGER_PLUGINS = lang_1.CONST_EXPR(new di_1.OpaqueToken("EventManagerPlugins"));
            let EventManager = class {
                constructor(plugins, _zone) {
                    this._zone = _zone;
                    plugins.forEach(p => p.manager = this);
                    this._plugins = collection_1.ListWrapper.reversed(plugins);
                }
                addEventListener(element, eventName, handler) {
                    var plugin = this._findPluginFor(eventName);
                    plugin.addEventListener(element, eventName, handler);
                }
                addGlobalEventListener(target, eventName, handler) {
                    var plugin = this._findPluginFor(eventName);
                    return plugin.addGlobalEventListener(target, eventName, handler);
                }
                getZone() { return this._zone; }
                /** @internal */
                _findPluginFor(eventName) {
                    var plugins = this._plugins;
                    for (var i = 0; i < plugins.length; i++) {
                        var plugin = plugins[i];
                        if (plugin.supports(eventName)) {
                            return plugin;
                        }
                    }
                    throw new exceptions_1.BaseException(`No event manager plugin found for event ${eventName}`);
                }
            };
            EventManager = __decorate([
                di_1.Injectable(),
                __param(0, di_1.Inject(EVENT_MANAGER_PLUGINS))
            ], EventManager);
            EventManager = EventManager;
            class EventManagerPlugin {
                // That is equivalent to having supporting $event.target
                supports(eventName) { return false; }
                addEventListener(element, eventName, handler) {
                    throw "not implemented";
                }
                addGlobalEventListener(element, eventName, handler) {
                    throw "not implemented";
                }
            }
            EventManagerPlugin = EventManagerPlugin;
            let DomEventsPlugin = class extends EventManagerPlugin {
                // This plugin should come last in the list of plugins, because it accepts all
                // events.
                supports(eventName) { return true; }
                addEventListener(element, eventName, handler) {
                    var zone = this.manager.getZone();
                    var outsideHandler = (event) => zone.run(() => handler(event));
                    this.manager.getZone().runOutsideAngular(() => { dom_adapter_1.DOM.on(element, eventName, outsideHandler); });
                }
                addGlobalEventListener(target, eventName, handler) {
                    var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
                    var zone = this.manager.getZone();
                    var outsideHandler = (event) => zone.run(() => handler(event));
                    return this.manager.getZone().runOutsideAngular(() => { return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler); });
                }
            };
            DomEventsPlugin = __decorate([
                di_1.Injectable()
            ], DomEventsPlugin);
            DomEventsPlugin = DomEventsPlugin;
        }
    }
});
//# sourceMappingURL=event_manager.js.map