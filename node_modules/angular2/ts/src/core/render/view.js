System.register(['angular2/src/core/facade/exceptions', 'angular2/src/core/facade/collection', 'angular2/src/core/facade/lang', './api'], function(exports_1) {
    var exceptions_1, collection_1, lang_1, api_1;
    var DefaultProtoViewRef, DefaultRenderFragmentRef, DefaultRenderView;
    return {
        setters:[
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (api_1_1) {
                api_1 = api_1_1;
            }],
        execute: function() {
            class DefaultProtoViewRef extends api_1.RenderProtoViewRef {
                constructor(cmds) {
                    super();
                    this.cmds = cmds;
                }
            }
            DefaultProtoViewRef = DefaultProtoViewRef;
            class DefaultRenderFragmentRef extends api_1.RenderFragmentRef {
                constructor(nodes) {
                    super();
                    this.nodes = nodes;
                }
            }
            DefaultRenderFragmentRef = DefaultRenderFragmentRef;
            class DefaultRenderView extends api_1.RenderViewRef {
                constructor(fragments, boundTextNodes, boundElements, nativeShadowRoots, globalEventAdders, rootContentInsertionPoints) {
                    super();
                    this.fragments = fragments;
                    this.boundTextNodes = boundTextNodes;
                    this.boundElements = boundElements;
                    this.nativeShadowRoots = nativeShadowRoots;
                    this.globalEventAdders = globalEventAdders;
                    this.rootContentInsertionPoints = rootContentInsertionPoints;
                    this.hydrated = false;
                    this.eventDispatcher = null;
                    this.globalEventRemovers = null;
                }
                hydrate() {
                    if (this.hydrated)
                        throw new exceptions_1.BaseException('The view is already hydrated.');
                    this.hydrated = true;
                    this.globalEventRemovers = collection_1.ListWrapper.createFixedSize(this.globalEventAdders.length);
                    for (var i = 0; i < this.globalEventAdders.length; i++) {
                        this.globalEventRemovers[i] = this.globalEventAdders[i]();
                    }
                }
                dehydrate() {
                    if (!this.hydrated)
                        throw new exceptions_1.BaseException('The view is already dehydrated.');
                    for (var i = 0; i < this.globalEventRemovers.length; i++) {
                        this.globalEventRemovers[i]();
                    }
                    this.globalEventRemovers = null;
                    this.hydrated = false;
                }
                setEventDispatcher(dispatcher) { this.eventDispatcher = dispatcher; }
                dispatchRenderEvent(boundElementIndex, eventName, event) {
                    var allowDefaultBehavior = true;
                    if (lang_1.isPresent(this.eventDispatcher)) {
                        var locals = new collection_1.Map();
                        locals.set('$event', event);
                        allowDefaultBehavior =
                            this.eventDispatcher.dispatchRenderEvent(boundElementIndex, eventName, locals);
                    }
                    return allowDefaultBehavior;
                }
            }
            DefaultRenderView = DefaultRenderView;
        }
    }
});
//# sourceMappingURL=view.js.map