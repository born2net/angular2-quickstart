System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/collection', 'angular2/src/core/facade/exceptions', 'angular2/src/core/dom/dom_adapter', 'angular2/src/core/linker/view_ref'], function(exports_1) {
    var lang_1, collection_1, exceptions_1, dom_adapter_1, view_ref_1;
    var DebugElement, DebugElement_, Scope, By;
    /**
     * Returns a DebugElement for a ElementRef.
     *
     * @param {ElementRef}: elementRef
     * @return {DebugElement}
     */
    function inspectElement(elementRef) {
        return new DebugElement_(view_ref_1.internalView(elementRef.parentView), elementRef.boundElementIndex);
    }
    exports_1("inspectElement", inspectElement);
    function asNativeElements(arr) {
        return arr.map((debugEl) => debugEl.nativeElement);
    }
    exports_1("asNativeElements", asNativeElements);
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            },
            function (view_ref_1_1) {
                view_ref_1 = view_ref_1_1;
            }],
        execute: function() {
            /**
             * A DebugElement contains information from the Angular compiler about an
             * element and provides access to the corresponding ElementInjector and
             * underlying DOM Element, as well as a way to query for children.
             */
            class DebugElement {
                get componentInstance() { return exceptions_1.unimplemented(); }
                ;
                get nativeElement() { return exceptions_1.unimplemented(); }
                ;
                get elementRef() { return exceptions_1.unimplemented(); }
                ;
                /**
                 * Get child DebugElements from within the Light DOM.
                 *
                 * @return {DebugElement[]}
                 */
                get children() { return exceptions_1.unimplemented(); }
                ;
                /**
                 * Get the root DebugElement children of a component. Returns an empty
                 * list if the current DebugElement is not a component root.
                 *
                 * @return {DebugElement[]}
                 */
                get componentViewChildren() { return exceptions_1.unimplemented(); }
                ;
                /**
                 * Return the first descendant TestElement matching the given predicate
                 * and scope.
                 *
                 * @param {Function: boolean} predicate
                 * @param {Scope} scope
                 *
                 * @return {DebugElement}
                 */
                query(predicate, scope = Scope.all) {
                    var results = this.queryAll(predicate, scope);
                    return results.length > 0 ? results[0] : null;
                }
                /**
                 * Return descendant TestElememts matching the given predicate
                 * and scope.
                 *
                 * @param {Function: boolean} predicate
                 * @param {Scope} scope
                 *
                 * @return {DebugElement[]}
                 */
                queryAll(predicate, scope = Scope.all) {
                    var elementsInScope = scope(this);
                    return collection_1.ListWrapper.filter(elementsInScope, predicate);
                }
            }
            DebugElement = DebugElement;
            class DebugElement_ extends DebugElement {
                constructor(_parentView, _boundElementIndex) {
                    super();
                    this._parentView = _parentView;
                    this._boundElementIndex = _boundElementIndex;
                    this._elementInjector = this._parentView.elementInjectors[this._boundElementIndex];
                }
                get componentInstance() {
                    if (!lang_1.isPresent(this._elementInjector)) {
                        return null;
                    }
                    return this._elementInjector.getComponent();
                }
                get nativeElement() { return this.elementRef.nativeElement; }
                get elementRef() { return this._parentView.elementRefs[this._boundElementIndex]; }
                getDirectiveInstance(directiveIndex) {
                    return this._elementInjector.getDirectiveAtIndex(directiveIndex);
                }
                get children() {
                    return this._getChildElements(this._parentView, this._boundElementIndex);
                }
                get componentViewChildren() {
                    var shadowView = this._parentView.getNestedView(this._boundElementIndex);
                    if (!lang_1.isPresent(shadowView)) {
                        // The current element is not a component.
                        return [];
                    }
                    return this._getChildElements(shadowView, null);
                }
                triggerEventHandler(eventName, eventObj) {
                    this._parentView.triggerEventHandlers(eventName, eventObj, this._boundElementIndex);
                }
                hasDirective(type) {
                    if (!lang_1.isPresent(this._elementInjector)) {
                        return false;
                    }
                    return this._elementInjector.hasDirective(type);
                }
                inject(type) {
                    if (!lang_1.isPresent(this._elementInjector)) {
                        return null;
                    }
                    return this._elementInjector.get(type);
                }
                getLocal(name) { return this._parentView.locals.get(name); }
                /** @internal */
                _getChildElements(view, parentBoundElementIndex) {
                    var els = [];
                    var parentElementBinder = null;
                    if (lang_1.isPresent(parentBoundElementIndex)) {
                        parentElementBinder = view.proto.elementBinders[parentBoundElementIndex - view.elementOffset];
                    }
                    for (var i = 0; i < view.proto.elementBinders.length; ++i) {
                        var binder = view.proto.elementBinders[i];
                        if (binder.parent == parentElementBinder) {
                            els.push(new DebugElement_(view, view.elementOffset + i));
                            var views = view.viewContainers[view.elementOffset + i];
                            if (lang_1.isPresent(views)) {
                                views.views.forEach((nextView) => { els = els.concat(this._getChildElements(nextView, null)); });
                            }
                        }
                    }
                    return els;
                }
            }
            DebugElement_ = DebugElement_;
            class Scope {
                static all(debugElement) {
                    var scope = [];
                    scope.push(debugElement);
                    debugElement.children.forEach(child => scope = scope.concat(Scope.all(child)));
                    debugElement.componentViewChildren.forEach(child => scope = scope.concat(Scope.all(child)));
                    return scope;
                }
                static light(debugElement) {
                    var scope = [];
                    debugElement.children.forEach(child => {
                        scope.push(child);
                        scope = scope.concat(Scope.light(child));
                    });
                    return scope;
                }
                static view(debugElement) {
                    var scope = [];
                    debugElement.componentViewChildren.forEach(child => {
                        scope.push(child);
                        scope = scope.concat(Scope.light(child));
                    });
                    return scope;
                }
            }
            Scope = Scope;
            class By {
                static all() { return (debugElement) => true; }
                static css(selector) {
                    return (debugElement) => {
                        return lang_1.isPresent(debugElement.nativeElement) ?
                            dom_adapter_1.DOM.elementMatches(debugElement.nativeElement, selector) :
                            false;
                    };
                }
                static directive(type) {
                    return (debugElement) => { return debugElement.hasDirective(type); };
                }
            }
            By = By;
        }
    }
});
//# sourceMappingURL=debug_element.js.map