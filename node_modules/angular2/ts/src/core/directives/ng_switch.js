System.register(['angular2/src/core/metadata', 'angular2/src/core/di', 'angular2/src/core/facade/lang', 'angular2/src/core/facade/collection'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var metadata_1, di_1, lang_1, collection_1;
    var _WHEN_DEFAULT, SwitchView, NgSwitch, NgSwitchWhen, NgSwitchDefault;
    return {
        setters:[
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            }],
        execute: function() {
            const _WHEN_DEFAULT = lang_1.CONST_EXPR(new Object());
            class SwitchView {
                constructor(_viewContainerRef, _templateRef) {
                    this._viewContainerRef = _viewContainerRef;
                    this._templateRef = _templateRef;
                }
                create() { this._viewContainerRef.createEmbeddedView(this._templateRef); }
                destroy() { this._viewContainerRef.clear(); }
            }
            SwitchView = SwitchView;
            /**
             * The `NgSwitch` directive is used to conditionally swap DOM structure on your template based on a
             * scope expression.
             * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
             * preserved at the location as specified in the template.
             *
             * `NgSwitch` simply chooses nested elements and makes them visible based on which element matches
             * the value obtained from the evaluated expression. In other words, you define a container element
             * (where you place the directive), place an expression on the **`[ng-switch]="..."` attribute**),
             * define any inner elements inside of the directive and place a `[ng-switch-when]` attribute per
             * element.
             * The when attribute is used to inform NgSwitch which element to display when the expression is
             * evaluated. If a matching expression is not found via a when attribute then an element with the
             * default attribute is displayed.
             *
             * # Example:
             *
             * ```
             * <ANY [ng-switch]="expression">
             *   <template [ng-switch-when]="whenExpression1">...</template>
             *   <template [ng-switch-when]="whenExpression1">...</template>
             *   <template ng-switch-default>...</template>
             * </ANY>
             * ```
             */
            let NgSwitch = class {
                constructor() {
                    this._useDefault = false;
                    this._valueViews = new collection_1.Map();
                    this._activeViews = [];
                }
                set ngSwitch(value) {
                    // Empty the currently active ViewContainers
                    this._emptyAllActiveViews();
                    // Add the ViewContainers matching the value (with a fallback to default)
                    this._useDefault = false;
                    var views = this._valueViews.get(value);
                    if (lang_1.isBlank(views)) {
                        this._useDefault = true;
                        views = lang_1.normalizeBlank(this._valueViews.get(_WHEN_DEFAULT));
                    }
                    this._activateViews(views);
                    this._switchValue = value;
                }
                /** @internal */
                _onWhenValueChanged(oldWhen, newWhen, view) {
                    this._deregisterView(oldWhen, view);
                    this._registerView(newWhen, view);
                    if (oldWhen === this._switchValue) {
                        view.destroy();
                        collection_1.ListWrapper.remove(this._activeViews, view);
                    }
                    else if (newWhen === this._switchValue) {
                        if (this._useDefault) {
                            this._useDefault = false;
                            this._emptyAllActiveViews();
                        }
                        view.create();
                        this._activeViews.push(view);
                    }
                    // Switch to default when there is no more active ViewContainers
                    if (this._activeViews.length === 0 && !this._useDefault) {
                        this._useDefault = true;
                        this._activateViews(this._valueViews.get(_WHEN_DEFAULT));
                    }
                }
                /** @internal */
                _emptyAllActiveViews() {
                    var activeContainers = this._activeViews;
                    for (var i = 0; i < activeContainers.length; i++) {
                        activeContainers[i].destroy();
                    }
                    this._activeViews = [];
                }
                /** @internal */
                _activateViews(views) {
                    // TODO(vicb): assert(this._activeViews.length === 0);
                    if (lang_1.isPresent(views)) {
                        for (var i = 0; i < views.length; i++) {
                            views[i].create();
                        }
                        this._activeViews = views;
                    }
                }
                /** @internal */
                _registerView(value, view) {
                    var views = this._valueViews.get(value);
                    if (lang_1.isBlank(views)) {
                        views = [];
                        this._valueViews.set(value, views);
                    }
                    views.push(view);
                }
                /** @internal */
                _deregisterView(value, view) {
                    // `_WHEN_DEFAULT` is used a marker for non-registered whens
                    if (value === _WHEN_DEFAULT)
                        return;
                    var views = this._valueViews.get(value);
                    if (views.length == 1) {
                        this._valueViews.delete(value);
                    }
                    else {
                        collection_1.ListWrapper.remove(views, view);
                    }
                }
            };
            NgSwitch = __decorate([
                metadata_1.Directive({ selector: '[ng-switch]', inputs: ['ngSwitch'] })
            ], NgSwitch);
            NgSwitch = NgSwitch;
            /**
             * Defines a case statement as an expression.
             *
             * If multiple `NgSwitchWhen` match the `NgSwitch` value, all of them are displayed.
             *
             * Example:
             *
             * ```
             * // match against a context variable
             * <template [ng-switch-when]="contextVariable">...</template>
             *
             * // match against a constant string
             * <template ng-switch-when="stringValue">...</template>
             * ```
             */
            let NgSwitchWhen = class {
                constructor(viewContainer, templateRef, _switch) {
                    this._switch = _switch;
                    // `_WHEN_DEFAULT` is used as a marker for a not yet initialized value
                    /** @internal */
                    this._value = _WHEN_DEFAULT;
                    this._view = new SwitchView(viewContainer, templateRef);
                }
                set ngSwitchWhen(value) {
                    this._switch._onWhenValueChanged(this._value, value, this._view);
                    this._value = value;
                }
            };
            NgSwitchWhen = __decorate([
                metadata_1.Directive({ selector: '[ng-switch-when]', inputs: ['ngSwitchWhen'] }),
                __param(2, di_1.Host())
            ], NgSwitchWhen);
            NgSwitchWhen = NgSwitchWhen;
            /**
             * Defines a default case statement.
             *
             * Default case statements are displayed when no `NgSwitchWhen` match the `ng-switch` value.
             *
             * Example:
             *
             * ```
             * <template ng-switch-default>...</template>
             * ```
             */
            let NgSwitchDefault = class {
                constructor(viewContainer, templateRef, sswitch) {
                    sswitch._registerView(_WHEN_DEFAULT, new SwitchView(viewContainer, templateRef));
                }
            };
            NgSwitchDefault = __decorate([
                metadata_1.Directive({ selector: '[ng-switch-default]' }),
                __param(2, di_1.Host())
            ], NgSwitchDefault);
            NgSwitchDefault = NgSwitchDefault;
        }
    }
});
//# sourceMappingURL=ng_switch.js.map