System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/collection', 'angular2/src/core/di'], function(exports_1) {
    var lang_1, lang_2, collection_1, di_1;
    var NG_VALIDATORS, Validators;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
                lang_2 = lang_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            }],
        execute: function() {
            NG_VALIDATORS = lang_2.CONST_EXPR(new di_1.OpaqueToken("NgValidators"));
            /**
             * Provides a set of validators used by form controls.
             *
             * # Example
             *
             * ```
             * var loginControl = new Control("", Validators.required)
             * ```
             */
            class Validators {
                static required(control) {
                    return lang_1.isBlank(control.value) || control.value == "" ? { "required": true } : null;
                }
                static minLength(minLength) {
                    return (control) => {
                        if (lang_1.isPresent(Validators.required(control)))
                            return null;
                        var v = control.value;
                        return v.length < minLength ?
                            { "minlength": { "requiredLength": minLength, "actualLength": v.length } } :
                            null;
                    };
                }
                static maxLength(maxLength) {
                    return (control) => {
                        if (lang_1.isPresent(Validators.required(control)))
                            return null;
                        var v = control.value;
                        return v.length > maxLength ?
                            { "maxlength": { "requiredLength": maxLength, "actualLength": v.length } } :
                            null;
                    };
                }
                static nullValidator(c) { return null; }
                static compose(validators) {
                    if (lang_1.isBlank(validators))
                        return Validators.nullValidator;
                    return function (control) {
                        var res = collection_1.ListWrapper.reduce(validators, (res, validator) => {
                            var errors = validator(control);
                            return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
                        }, {});
                        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
                    };
                }
                static group(group) {
                    var res = {};
                    collection_1.StringMapWrapper.forEach(group.controls, (control, name) => {
                        if (group.contains(name) && lang_1.isPresent(control.errors)) {
                            Validators._mergeErrors(control, res);
                        }
                    });
                    return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
                }
                static array(array) {
                    var res = {};
                    array.controls.forEach((control) => {
                        if (lang_1.isPresent(control.errors)) {
                            Validators._mergeErrors(control, res);
                        }
                    });
                    return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
                }
                static _mergeErrors(control, res) {
                    collection_1.StringMapWrapper.forEach(control.errors, (value, error) => {
                        if (!collection_1.StringMapWrapper.contains(res, error)) {
                            res[error] = [];
                        }
                        var current = res[error];
                        current.push(control);
                    });
                }
            }
            Validators = Validators;
        }
    }
});
//# sourceMappingURL=validators.js.map