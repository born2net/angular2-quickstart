System.register(['angular2/src/core/metadata', 'angular2/src/core/di', './control_value_accessor', 'angular2/src/core/facade/lang', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var metadata_1, di_1, control_value_accessor_1, lang_1, shared_1;
    var DEFAULT_VALUE_ACCESSOR, DefaultValueAccessor;
    return {
        setters:[
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (control_value_accessor_1_1) {
                control_value_accessor_1 = control_value_accessor_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const DEFAULT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(() => DefaultValueAccessor), multi: true }));
            /**
             * The default accessor for writing a value and listening to changes that is used by the
             * {@link NgModel}, {@link NgFormControl}, and {@link NgControlName} directives.
             *
             *  # Example
             *  ```
             *  <input type="text" [(ng-model)]="searchQuery">
             *  ```
             */
            let DefaultValueAccessor = class {
                constructor(_renderer, _elementRef) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this.onChange = (_) => { };
                    this.onTouched = () => { };
                }
                writeValue(value) {
                    var normalizedValue = lang_1.isBlank(value) ? '' : value;
                    shared_1.setProperty(this._renderer, this._elementRef, 'value', normalizedValue);
                }
                registerOnChange(fn) { this.onChange = fn; }
                registerOnTouched(fn) { this.onTouched = fn; }
            };
            DefaultValueAccessor = __decorate([
                metadata_1.Directive({
                    selector: '[ng-control],[ng-model],[ng-form-control]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    bindings: [DEFAULT_VALUE_ACCESSOR]
                })
            ], DefaultValueAccessor);
            DefaultValueAccessor = DefaultValueAccessor;
        }
    }
});
//# sourceMappingURL=default_value_accessor.js.map