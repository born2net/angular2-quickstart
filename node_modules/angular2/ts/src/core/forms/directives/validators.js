System.register(['angular2/src/core/di', 'angular2/src/core/facade/lang', 'angular2/src/core/metadata', '../validators', "angular2/src/core/facade/lang"], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var di_1, lang_1, metadata_1, validators_1, lang_2;
    var REQUIRED_VALIDATOR, RequiredValidator, MIN_LENGTH_VALIDATOR, MinLengthValidator, MAX_LENGTH_VALIDATOR, MaxLengthValidator;
    function createMinLengthValidator(dir) {
        return validators_1.Validators.minLength(dir.minLength);
    }
    function createMaxLengthValidator(dir) {
        return validators_1.Validators.maxLength(dir.maxLength);
    }
    return {
        setters:[
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (validators_1_1) {
                validators_1 = validators_1_1;
            },
            function (lang_2_1) {
                lang_2 = lang_2_1;
            }],
        execute: function() {
            const REQUIRED_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, { useValue: validators_1.Validators.required, multi: true }));
            let RequiredValidator = class {
            };
            RequiredValidator = __decorate([
                metadata_1.Directive({
                    selector: '[required][ng-control],[required][ng-form-control],[required][ng-model]',
                    providers: [REQUIRED_VALIDATOR]
                })
            ], RequiredValidator);
            RequiredValidator = RequiredValidator;
            const MIN_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, {
                useFactory: createMinLengthValidator,
                deps: [di_1.forwardRef(() => MinLengthValidator)],
                multi: true
            }));
            let MinLengthValidator = class {
                constructor(minLength) {
                    this.minLength = lang_2.NumberWrapper.parseInt(minLength, 10);
                }
            };
            MinLengthValidator = __decorate([
                metadata_1.Directive({
                    selector: '[minlength][ng-control],[minlength][ng-form-control],[minlength][ng-model]',
                    providers: [MIN_LENGTH_VALIDATOR]
                }),
                __param(0, metadata_1.Attribute("minlength"))
            ], MinLengthValidator);
            MinLengthValidator = MinLengthValidator;
            const MAX_LENGTH_VALIDATOR = lang_1.CONST_EXPR(new di_1.Provider(validators_1.NG_VALIDATORS, {
                useFactory: createMaxLengthValidator,
                deps: [di_1.forwardRef(() => MaxLengthValidator)],
                multi: true
            }));
            let MaxLengthValidator = class {
                constructor(maxLength) {
                    this.maxLength = lang_2.NumberWrapper.parseInt(maxLength, 10);
                }
            };
            MaxLengthValidator = __decorate([
                metadata_1.Directive({
                    selector: '[maxlength][ng-control],[maxlength][ng-form-control],[maxlength][ng-model]',
                    providers: [MAX_LENGTH_VALIDATOR]
                }),
                __param(0, metadata_1.Attribute("maxlength"))
            ], MaxLengthValidator);
            MaxLengthValidator = MaxLengthValidator;
        }
    }
});
//# sourceMappingURL=validators.js.map