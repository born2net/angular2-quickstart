System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/collection', 'angular2/src/core/facade/async', 'angular2/src/core/metadata', 'angular2/src/core/di', './control_container', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var lang_1, collection_1, async_1, metadata_1, di_1, control_container_1, shared_1;
    var formDirectiveProvider, NgFormModel;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (control_container_1_1) {
                control_container_1 = control_container_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const formDirectiveProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(() => NgFormModel) }));
            /**
             * Binds an existing control group to a DOM element.
             *
             * ### Example ([live demo](http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview))
             *
             * In this example, we bind the control group to the form element, and we bind the login and
             * password controls to the login and password elements.
             *
             *  ```typescript
             * @Component({
             *   selector: 'my-app',
             *   template: `
             *     <div>
             *       <h2>NgFormModel Example</h2>
             *       <form [ng-form-model]="loginForm">
             *         <p>Login: <input type="text" ng-control="login"></p>
             *         <p>Password: <input type="password" ng-control="password"></p>
             *       </form>
             *       <p>Value:</p>
             *       <pre>{{value}}</pre>
             *     </div>
             *   `,
             *   directives: [FORM_DIRECTIVES]
             * })
             * export class App {
             *   loginForm: ControlGroup;
             *
             *   constructor() {
             *     this.loginForm = new ControlGroup({
             *       login: new Control(""),
             *       password: new Control("")
             *     });
             *   }
             *
             *   get value(): string {
             *     return JSON.stringify(this.loginForm.value, null, 2);
             *   }
             * }
             *  ```
             *
             * We can also use ng-model to bind a domain model to the form.
             *
             *  ```typescript
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *        <form [ng-form-model]='loginForm'>
             *          Login <input type='text' ng-control='login' [(ng-model)]='credentials.login'>
             *          Password <input type='password' ng-control='password'
             *                          [(ng-model)]='credentials.password'>
             *          <button (click)="onLogin()">Login</button>
             *        </form>`
             *      })
             * class LoginComp {
             *  credentials: {login: string, password: string};
             *  loginForm: ControlGroup;
             *
             *  constructor() {
             *    this.loginForm = new ControlGroup({
             *      login: new Control(""),
             *      password: new Control("")
             *    });
             *  }
             *
             *  onLogin(): void {
             *    // this.credentials.login === 'some login'
             *    // this.credentials.password === 'some password'
             *  }
             * }
             *  ```
             */
            let NgFormModel = class extends control_container_1.ControlContainer {
                constructor(...args) {
                    super(...args);
                    this.form = null;
                    this.directives = [];
                    this.ngSubmit = new async_1.EventEmitter();
                }
                onChanges(_) { this._updateDomValue(); }
                get formDirective() { return this; }
                get control() { return this.form; }
                get path() { return []; }
                addControl(dir) {
                    var ctrl = this.form.find(dir.path);
                    shared_1.setUpControl(ctrl, dir);
                    ctrl.updateValidity();
                    this.directives.push(dir);
                }
                getControl(dir) { return this.form.find(dir.path); }
                removeControl(dir) { collection_1.ListWrapper.remove(this.directives, dir); }
                addControlGroup(dir) { }
                removeControlGroup(dir) { }
                getControlGroup(dir) {
                    return this.form.find(dir.path);
                }
                updateModel(dir, value) {
                    var ctrl = this.form.find(dir.path);
                    ctrl.updateValue(value);
                }
                onSubmit() {
                    async_1.ObservableWrapper.callNext(this.ngSubmit, null);
                    return false;
                }
                /** @internal */
                _updateDomValue() {
                    this.directives.forEach(dir => {
                        var ctrl = this.form.find(dir.path);
                        dir.valueAccessor.writeValue(ctrl.value);
                    });
                }
            };
            NgFormModel = __decorate([
                metadata_1.Directive({
                    selector: '[ng-form-model]',
                    bindings: [formDirectiveProvider],
                    inputs: ['form: ng-form-model'],
                    host: { '(submit)': 'onSubmit()' },
                    outputs: ['ngSubmit'],
                    exportAs: 'form'
                })
            ], NgFormModel);
            NgFormModel = NgFormModel;
        }
    }
});
//# sourceMappingURL=ng_form_model.js.map