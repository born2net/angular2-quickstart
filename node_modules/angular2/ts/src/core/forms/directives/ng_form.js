System.register(['angular2/src/core/facade/async', 'angular2/src/core/facade/collection', 'angular2/src/core/facade/lang', 'angular2/src/core/metadata', 'angular2/src/core/di', './control_container', '../model', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var async_1, collection_1, lang_1, metadata_1, di_1, control_container_1, model_1, shared_1;
    var formDirectiveProvider, NgForm;
    return {
        setters:[
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (control_container_1_1) {
                control_container_1 = control_container_1_1;
            },
            function (model_1_1) {
                model_1 = model_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const formDirectiveProvider = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(() => NgForm) }));
            /**
             * If `NgForm` is bound in a component, `<form>` elements in that component will be
             * upgraded to use the Angular form system.
             *
             * # Typical Use
             *
             * Include `FORM_DIRECTIVES` in the `directives` section of a {@link View} annotation
             * to use `NgForm` and its associated controls.
             *
             * # Structure
             *
             * An Angular form is a collection of `Control`s in some hierarchy.
             * `Control`s can be at the top level or can be organized in `ControlGroup`s
             * or `ControlArray`s. This hierarchy is reflected in the form's `value`, a
             * JSON object that mirrors the form structure.
             *
             * # Submission
             *
             * The `ng-submit` event signals when the user triggers a form submission.
             *
             * ### Example ([live demo](http://plnkr.co/edit/ltdgYj4P0iY64AR71EpL?p=preview))
             *
             *  ```typescript
             * @Component({
             *   selector: 'my-app',
             *   template: `
             *     <div>
             *       <p>Submit the form to see the data object Angular builds</p>
             *       <h2>NgForm demo</h2>
             *       <form #f="form" (ng-submit)="onSubmit(f.value)">
             *         <h3>Control group: credentials</h3>
             *         <div ng-control-group="credentials">
             *           <p>Login: <input type="text" ng-control="login"></p>
             *           <p>Password: <input type="password" ng-control="password"></p>
             *         </div>
             *         <h3>Control group: person</h3>
             *         <div ng-control-group="person">
             *           <p>First name: <input type="text" ng-control="firstName"></p>
             *           <p>Last name: <input type="text" ng-control="lastName"></p>
             *         </div>
             *         <button type="submit">Submit Form</button>
             *       <p>Form data submitted:</p>
             *       </form>
             *       <pre>{{data}}</pre>
             *     </div>
             * `,
             *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
             * })
             * export class App {
             *   constructor() {}
             *
             *   data: string;
             *
             *   onSubmit(data) {
             *     this.data = JSON.stringify(data, null, 2);
             *   }
             * }
             *  ```
             */
            let NgForm = class extends control_container_1.ControlContainer {
                constructor(...args) {
                    super(...args);
                    this.form = new model_1.ControlGroup({});
                    this.ngSubmit = new async_1.EventEmitter();
                }
                get formDirective() { return this; }
                get control() { return this.form; }
                get path() { return []; }
                get controls() { return this.form.controls; }
                addControl(dir) {
                    this._later(_ => {
                        var container = this._findContainer(dir.path);
                        var ctrl = new model_1.Control();
                        shared_1.setUpControl(ctrl, dir);
                        container.addControl(dir.name, ctrl);
                        ctrl.updateValidity();
                    });
                }
                getControl(dir) { return this.form.find(dir.path); }
                removeControl(dir) {
                    this._later(_ => {
                        var container = this._findContainer(dir.path);
                        if (lang_1.isPresent(container)) {
                            container.removeControl(dir.name);
                            container.updateValidity();
                        }
                    });
                }
                addControlGroup(dir) {
                    this._later(_ => {
                        var container = this._findContainer(dir.path);
                        var group = new model_1.ControlGroup({});
                        container.addControl(dir.name, group);
                        group.updateValidity();
                    });
                }
                removeControlGroup(dir) {
                    this._later(_ => {
                        var container = this._findContainer(dir.path);
                        if (lang_1.isPresent(container)) {
                            container.removeControl(dir.name);
                            container.updateValidity();
                        }
                    });
                }
                getControlGroup(dir) {
                    return this.form.find(dir.path);
                }
                updateModel(dir, value) {
                    this._later(_ => {
                        var ctrl = this.form.find(dir.path);
                        ctrl.updateValue(value);
                    });
                }
                onSubmit() {
                    async_1.ObservableWrapper.callNext(this.ngSubmit, null);
                    return false;
                }
                /** @internal */
                _findContainer(path) {
                    path.pop();
                    return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
                }
                /** @internal */
                _later(fn) { async_1.PromiseWrapper.then(async_1.PromiseWrapper.resolve(null), fn, (_) => { }); }
            };
            NgForm = __decorate([
                metadata_1.Directive({
                    selector: 'form:not([ng-no-form]):not([ng-form-model]),ng-form,[ng-form]',
                    bindings: [formDirectiveProvider],
                    host: {
                        '(submit)': 'onSubmit()',
                    },
                    outputs: ['ngSubmit'],
                    exportAs: 'form'
                })
            ], NgForm);
            NgForm = NgForm;
        }
    }
});
//# sourceMappingURL=ng_form.js.map