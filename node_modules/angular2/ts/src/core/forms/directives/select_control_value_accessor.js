System.register(['angular2/src/core/di', 'angular2/src/core/metadata', 'angular2/src/core/facade/async', './control_value_accessor', 'angular2/src/core/facade/lang', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var di_1, metadata_1, async_1, control_value_accessor_1, lang_1, shared_1;
    var SELECT_VALUE_ACCESSOR, NgSelectOption, SelectControlValueAccessor;
    return {
        setters:[
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (control_value_accessor_1_1) {
                control_value_accessor_1 = control_value_accessor_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const SELECT_VALUE_ACCESSOR = lang_1.CONST_EXPR(new di_1.Provider(control_value_accessor_1.NG_VALUE_ACCESSOR, { useExisting: di_1.forwardRef(() => SelectControlValueAccessor), multi: true }));
            /**
             * Marks `<option>` as dynamic, so Angular can be notified when options change.
             *
             * #Example:
             *
             * ```
             * <select ng-control="city">
             *   <option *ng-for="#c of cities" [value]="c"></option>
             * </select>
             * ```
             */
            let NgSelectOption = class {
            };
            NgSelectOption = __decorate([
                metadata_1.Directive({ selector: 'option' })
            ], NgSelectOption);
            NgSelectOption = NgSelectOption;
            /**
             * The accessor for writing a value and listening to changes on a select element.
             */
            let SelectControlValueAccessor = class {
                constructor(_renderer, _elementRef, query) {
                    this._renderer = _renderer;
                    this._elementRef = _elementRef;
                    this.onChange = (_) => { };
                    this.onTouched = () => { };
                    this._updateValueWhenListOfOptionsChanges(query);
                }
                writeValue(value) {
                    this.value = value;
                    shared_1.setProperty(this._renderer, this._elementRef, "value", value);
                }
                registerOnChange(fn) { this.onChange = fn; }
                registerOnTouched(fn) { this.onTouched = fn; }
                _updateValueWhenListOfOptionsChanges(query) {
                    async_1.ObservableWrapper.subscribe(query.changes, (_) => this.writeValue(this.value));
                }
            };
            SelectControlValueAccessor = __decorate([
                metadata_1.Directive({
                    selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    bindings: [SELECT_VALUE_ACCESSOR]
                }),
                __param(2, metadata_1.Query(NgSelectOption, { descendants: true }))
            ], SelectControlValueAccessor);
            SelectControlValueAccessor = SelectControlValueAccessor;
        }
    }
});
//# sourceMappingURL=select_control_value_accessor.js.map