System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/async', 'angular2/src/core/metadata', 'angular2/src/core/di', './ng_control', './control_value_accessor', './shared', '../validators'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var lang_1, async_1, metadata_1, di_1, ng_control_1, control_value_accessor_1, shared_1, validators_1;
    var controlNameBinding, NgControlName;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (ng_control_1_1) {
                ng_control_1 = ng_control_1_1;
            },
            function (control_value_accessor_1_1) {
                control_value_accessor_1 = control_value_accessor_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            },
            function (validators_1_1) {
                validators_1 = validators_1_1;
            }],
        execute: function() {
            const controlNameBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(() => NgControlName) }));
            /**
             * Creates and binds a control with a specified name to a DOM element.
             *
             * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
            
             * # Example
             *
             * In this example, we create the login and password controls.
             * We can work with each control separately: check its validity, get its value, listen to its
             * changes.
             *
             *  ```
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *        <form #f="form" (submit)='onLogIn(f.value)'>
             *          Login <input type='text' ng-control='login' #l="form">
             *          <div *ng-if="!l.valid">Login is invalid</div>
             *
             *          Password <input type='password' ng-control='password'>
             *          <button type='submit'>Log in!</button>
             *        </form>
             *      `})
             * class LoginComp {
             *  onLogIn(value): void {
             *    // value === {login: 'some login', password: 'some password'}
             *  }
             * }
             *  ```
             *
             * We can also use ng-model to bind a domain model to the form.
             *
             *  ```
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *        <form (submit)='onLogIn()'>
             *          Login <input type='text' ng-control='login' [(ng-model)]="credentials.login">
             *          Password <input type='password' ng-control='password'
             *                          [(ng-model)]="credentials.password">
             *          <button type='submit'>Log in!</button>
             *        </form>
             *      `})
             * class LoginComp {
             *  credentials: {login:string, password:string};
             *
             *  onLogIn(): void {
             *    // this.credentials.login === "some login"
             *    // this.credentials.password === "some password"
             *  }
             * }
             *  ```
             */
            let NgControlName = class extends ng_control_1.NgControl {
                constructor(parent, validators, valueAccessors) {
                    super();
                    this.update = new async_1.EventEmitter();
                    /** @internal */
                    this._added = false;
                    this._parent = parent;
                    this.validators = validators;
                    this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
                }
                onChanges(changes) {
                    if (!this._added) {
                        this.formDirective.addControl(this);
                        this._added = true;
                    }
                    if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
                        this.viewModel = this.model;
                        this.formDirective.updateModel(this, this.model);
                    }
                }
                onDestroy() { this.formDirective.removeControl(this); }
                viewToModelUpdate(newValue) {
                    this.viewModel = newValue;
                    async_1.ObservableWrapper.callNext(this.update, newValue);
                }
                get path() { return shared_1.controlPath(this.name, this._parent); }
                get formDirective() { return this._parent.formDirective; }
                get control() { return this.formDirective.getControl(this); }
                get validator() { return validators_1.Validators.compose(this.validators); }
            };
            NgControlName = __decorate([
                metadata_1.Directive({
                    selector: '[ng-control]',
                    bindings: [controlNameBinding],
                    inputs: ['name: ngControl', 'model: ngModel'],
                    outputs: ['update: ngModelChange'],
                    exportAs: 'form'
                }),
                __param(0, di_1.Host()),
                __param(0, di_1.SkipSelf()),
                __param(1, di_1.Optional()),
                __param(1, di_1.Inject(validators_1.NG_VALIDATORS)),
                __param(2, di_1.Optional()),
                __param(2, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR))
            ], NgControlName);
            NgControlName = NgControlName;
        }
    }
});
//# sourceMappingURL=ng_control_name.js.map