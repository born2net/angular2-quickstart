System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/async', 'angular2/src/core/metadata', 'angular2/src/core/di', './control_value_accessor', './ng_control', '../model', '../validators', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var lang_1, async_1, metadata_1, di_1, control_value_accessor_1, ng_control_1, model_1, validators_1, shared_1;
    var formControlBinding, NgModel;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (control_value_accessor_1_1) {
                control_value_accessor_1 = control_value_accessor_1_1;
            },
            function (ng_control_1_1) {
                ng_control_1 = ng_control_1_1;
            },
            function (model_1_1) {
                model_1 = model_1_1;
            },
            function (validators_1_1) {
                validators_1 = validators_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const formControlBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(() => NgModel) }));
            /**
             * Binds a domain model to a form control.
             *
             * # Usage
             *
             * `ng-model` binds an existing domain model to a form control. For a
             * two-way binding, use `[(ng-model)]` to ensure the model updates in
             * both directions.
             *
             * ### Example ([live demo](http://plnkr.co/edit/R3UX5qDaUqFO2VYR0UzH?p=preview))
             *  ```typescript
             * @Component({
             *      selector: "search-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `<input type='text' [(ng-model)]="searchQuery">`
             *      })
             * class SearchComp {
             *  searchQuery: string;
             * }
             *  ```
             */
            let NgModel = class extends ng_control_1.NgControl {
                constructor(validators, valueAccessors) {
                    super();
                    /** @internal */
                    this._control = new model_1.Control();
                    /** @internal */
                    this._added = false;
                    this.update = new async_1.EventEmitter();
                    this.validators = validators;
                    this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
                }
                onChanges(changes) {
                    if (!this._added) {
                        shared_1.setUpControl(this._control, this);
                        this._control.updateValidity();
                        this._added = true;
                    }
                    if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
                        this._control.updateValue(this.model);
                        this.viewModel = this.model;
                    }
                }
                get control() { return this._control; }
                get path() { return []; }
                get validator() { return validators_1.Validators.compose(this.validators); }
                viewToModelUpdate(newValue) {
                    this.viewModel = newValue;
                    async_1.ObservableWrapper.callNext(this.update, newValue);
                }
            };
            NgModel = __decorate([
                metadata_1.Directive({
                    selector: '[ng-model]:not([ng-control]):not([ng-form-control])',
                    bindings: [formControlBinding],
                    inputs: ['model: ngModel'],
                    outputs: ['update: ngModelChange'],
                    exportAs: 'form'
                }),
                __param(0, di_1.Optional()),
                __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
                __param(1, di_1.Optional()),
                __param(1, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR))
            ], NgModel);
            NgModel = NgModel;
        }
    }
});
//# sourceMappingURL=ng_model.js.map