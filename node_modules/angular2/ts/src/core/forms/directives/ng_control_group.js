System.register(['angular2/src/core/metadata', 'angular2/src/core/di', 'angular2/src/core/facade/lang', './control_container', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var metadata_1, di_1, lang_1, control_container_1, shared_1;
    var controlGroupBinding, NgControlGroup;
    return {
        setters:[
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (control_container_1_1) {
                control_container_1 = control_container_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const controlGroupBinding = lang_1.CONST_EXPR(new di_1.Provider(control_container_1.ControlContainer, { useExisting: di_1.forwardRef(() => NgControlGroup) }));
            /**
             * Creates and binds a control group to a DOM element.
             *
             * This directive can only be used as a child of {@link NgForm} or {@link NgFormModel}.
             *
             * # Example
             *
             * In this example, we create the credentials and personal control groups.
             * We can work with each group separately: check its validity, get its value, listen to its changes.
             *
             *  ```
             * @Component({
             *      selector: "signup-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: `
             *              <form #f="form" (submit)='onSignUp(f.value)'>
             *                <div ng-control-group='credentials' #credentials="form">
             *                  Login <input type='text' ng-control='login'>
             *                  Password <input type='password' ng-control='password'>
             *                </div>
             *                <div *ng-if="!credentials.valid">Credentials are invalid</div>
             *
             *                <div ng-control-group='personal'>
             *                  Name <input type='text' ng-control='name'>
             *                </div>
             *                <button type='submit'>Sign Up!</button>
             *              </form>
             *      `})
             * class SignupComp {
             *  onSignUp(value) {
             *    // value === {
             *    //  personal: {name: 'some name'},
             *    //  credentials: {login: 'some login', password: 'some password'}}
             *  }
             * }
             *
             *  ```
             */
            let NgControlGroup = class extends control_container_1.ControlContainer {
                constructor(_parent) {
                    super();
                    this._parent = _parent;
                }
                onInit() { this.formDirective.addControlGroup(this); }
                onDestroy() { this.formDirective.removeControlGroup(this); }
                get control() { return this.formDirective.getControlGroup(this); }
                get path() { return shared_1.controlPath(this.name, this._parent); }
                get formDirective() { return this._parent.formDirective; }
            };
            NgControlGroup = __decorate([
                metadata_1.Directive({
                    selector: '[ng-control-group]',
                    bindings: [controlGroupBinding],
                    inputs: ['name: ng-control-group'],
                    exportAs: 'form'
                }),
                __param(0, di_1.Host()),
                __param(0, di_1.SkipSelf())
            ], NgControlGroup);
            NgControlGroup = NgControlGroup;
        }
    }
});
//# sourceMappingURL=ng_control_group.js.map