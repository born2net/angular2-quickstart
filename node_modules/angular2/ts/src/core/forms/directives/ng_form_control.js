System.register(['angular2/src/core/facade/lang', 'angular2/src/core/facade/async', 'angular2/src/core/metadata', 'angular2/src/core/di', './ng_control', '../validators', './control_value_accessor', './shared'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var lang_1, async_1, metadata_1, di_1, ng_control_1, validators_1, control_value_accessor_1, shared_1;
    var formControlBinding, NgFormControl;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
            },
            function (metadata_1_1) {
                metadata_1 = metadata_1_1;
            },
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (ng_control_1_1) {
                ng_control_1 = ng_control_1_1;
            },
            function (validators_1_1) {
                validators_1 = validators_1_1;
            },
            function (control_value_accessor_1_1) {
                control_value_accessor_1 = control_value_accessor_1_1;
            },
            function (shared_1_1) {
                shared_1 = shared_1_1;
            }],
        execute: function() {
            const formControlBinding = lang_1.CONST_EXPR(new di_1.Provider(ng_control_1.NgControl, { useExisting: di_1.forwardRef(() => NgFormControl) }));
            /**
             * Binds an existing {@link Control} to a DOM element.
             *
             * ### Example ([live demo](http://plnkr.co/edit/jcQlZ2tTh22BZZ2ucNAT?p=preview))
             *
             * In this example, we bind the control to an input element. When the value of the input element
             * changes, the value of the control will reflect that change. Likewise, if the value of the
             * control changes, the input element reflects that change.
             *
             *  ```typescript
             * @Component({
             *   selector: 'my-app',
             *   template: `
             *     <div>
             *       <h2>NgFormControl Example</h2>
             *       <form>
             *         <p>Element with existing control: <input type="text"
             * [ng-form-control]="loginControl"></p>
             *         <p>Value of existing control: {{loginControl.value}}</p>
             *       </form>
             *     </div>
             *   `,
             *   directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]
             * })
             * export class App {
             *   loginControl: Control = new Control('');
             * }
             *  ```
             *
             * # ng-model
             *
             * We can also use `ng-model` to bind a domain model to the form.
             *
             * ### Example ([live demo](http://plnkr.co/edit/yHMLuHO7DNgT8XvtjTDH?p=preview))
             *
             *  ```typescript
             * @Component({
             *      selector: "login-comp",
             *      directives: [FORM_DIRECTIVES],
             *      template: "<input type='text' [ng-form-control]='loginControl' [(ng-model)]='login'>"
             *      })
             * class LoginComp {
             *  loginControl: Control = new Control('');
             *  login:string;
             * }
             *  ```
             */
            let NgFormControl = class extends ng_control_1.NgControl {
                constructor(validators, valueAccessors) {
                    super();
                    this.update = new async_1.EventEmitter();
                    /** @internal */
                    this._added = false;
                    this.validators = validators;
                    this.valueAccessor = shared_1.selectValueAccessor(this, valueAccessors);
                }
                onChanges(changes) {
                    if (!this._added) {
                        shared_1.setUpControl(this.form, this);
                        this.form.updateValidity();
                        this._added = true;
                    }
                    if (shared_1.isPropertyUpdated(changes, this.viewModel)) {
                        this.form.updateValue(this.model);
                        this.viewModel = this.model;
                    }
                }
                get path() { return []; }
                get control() { return this.form; }
                get validator() { return validators_1.Validators.compose(this.validators); }
                viewToModelUpdate(newValue) {
                    this.viewModel = newValue;
                    async_1.ObservableWrapper.callNext(this.update, newValue);
                }
            };
            NgFormControl = __decorate([
                metadata_1.Directive({
                    selector: '[ng-form-control]',
                    bindings: [formControlBinding],
                    inputs: ['form: ngFormControl', 'model: ngModel'],
                    outputs: ['update: ngModelChange'],
                    exportAs: 'form'
                }),
                __param(0, di_1.Optional()),
                __param(0, di_1.Inject(validators_1.NG_VALIDATORS)),
                __param(1, di_1.Optional()),
                __param(1, di_1.Inject(control_value_accessor_1.NG_VALUE_ACCESSOR))
            ], NgFormControl);
            NgFormControl = NgFormControl;
        }
    }
});
//# sourceMappingURL=ng_form_control.js.map