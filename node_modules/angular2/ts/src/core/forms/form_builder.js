System.register(['angular2/src/core/di', 'angular2/src/core/facade/collection', 'angular2/src/core/facade/lang', './model'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var di_1, collection_1, lang_1, modelModule;
    var FormBuilder;
    return {
        setters:[
            function (di_1_1) {
                di_1 = di_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (modelModule_1) {
                modelModule = modelModule_1;
            }],
        execute: function() {
            /**
             * Creates a form object from a user-specified configuration.
             *
             * # Example
             *
             * ```
             * import {Component, bootstrap} from 'angular2/angular2';
             * import {FormBuilder, Validators, FORM_DIRECTIVES, ControlGroup} from 'angular2/core';
             *
             * @Component({
             *   selector: 'login-comp',
             *   viewProviders: [FormBuilder],
             *   template: `
             *     <form [control-group]="loginForm">
             *       Login <input control="login">
             *
             *       <div control-group="passwordRetry">
             *         Password <input type="password" control="password">
             *         Confirm password <input type="password" control="passwordConfirmation">
             *       </div>
             *     </form>
             *   `,
             *   directives: [FORM_DIRECTIVES]
             * })
             * class LoginComp {
             *   loginForm: ControlGroup;
             *
             *   constructor(builder: FormBuilder) {
             *     this.loginForm = builder.group({
             *       login: ["", Validators.required],
             *
             *       passwordRetry: builder.group({
             *         password: ["", Validators.required],
             *         passwordConfirmation: ["", Validators.required]
             *       })
             *     });
             *   }
             * }
             *
             * bootstrap(LoginComp);
             * ```
             *
             * This example creates a {@link ControlGroup} that consists of a `login` {@link Control}, and a
             * nested {@link ControlGroup} that defines a `password` and a `passwordConfirmation`
             * {@link Control}:
             *
             * ```
             *  var loginForm = builder.group({
             *    login: ["", Validators.required],
             *
             *    passwordRetry: builder.group({
             *      password: ["", Validators.required],
             *      passwordConfirmation: ["", Validators.required]
             *    })
             *  });
             *
             *  ```
             */
            let FormBuilder = class {
                group(controlsConfig, extra = null) {
                    var controls = this._reduceControls(controlsConfig);
                    var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
                    var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
                    if (lang_1.isPresent(validator)) {
                        return new modelModule.ControlGroup(controls, optionals, validator);
                    }
                    else {
                        return new modelModule.ControlGroup(controls, optionals);
                    }
                }
                control(value, validator = null) {
                    if (lang_1.isPresent(validator)) {
                        return new modelModule.Control(value, validator);
                    }
                    else {
                        return new modelModule.Control(value);
                    }
                }
                array(controlsConfig, validator = null) {
                    var controls = controlsConfig.map(c => this._createControl(c));
                    if (lang_1.isPresent(validator)) {
                        return new modelModule.ControlArray(controls, validator);
                    }
                    else {
                        return new modelModule.ControlArray(controls);
                    }
                }
                /** @internal */
                _reduceControls(controlsConfig) {
                    var controls = {};
                    collection_1.StringMapWrapper.forEach(controlsConfig, (controlConfig, controlName) => {
                        controls[controlName] = this._createControl(controlConfig);
                    });
                    return controls;
                }
                /** @internal */
                _createControl(controlConfig) {
                    if (controlConfig instanceof modelModule.Control ||
                        controlConfig instanceof modelModule.ControlGroup ||
                        controlConfig instanceof modelModule.ControlArray) {
                        return controlConfig;
                    }
                    else if (lang_1.isArray(controlConfig)) {
                        var value = controlConfig[0];
                        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
                        return this.control(value, validator);
                    }
                    else {
                        return this.control(controlConfig);
                    }
                }
            };
            FormBuilder = __decorate([
                di_1.Injectable()
            ], FormBuilder);
            FormBuilder = FormBuilder;
        }
    }
});
//# sourceMappingURL=form_builder.js.map