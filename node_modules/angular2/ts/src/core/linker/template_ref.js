import { internalView } from './view_ref';
abstract;
class TemplateRef {
    constructor() {
        /**
         * Allows you to check if this Embedded Template defines Local Variable with name matching `name`.
         */
        this.abstract = hasLocal(name, string);
    }
}
export class TemplateRef_ extends TemplateRef {
    constructor(elementRef) {
        super();
        this.elementRef = elementRef;
    }
    _getProtoView() {
        let elementRef = this.elementRef;
        var parentView = internalView(elementRef.parentView);
        return parentView.proto.elementBinders[elementRef.boundElementIndex - parentView.elementOffset]
            .nestedProtoView;
    }
    /**
     * Reference to the ProtoView used for creating Embedded Views that are based on the compiled
     * Embedded Template.
     */
    get protoViewRef() { return this._getProtoView().ref; }
    hasLocal(name) {
        return this._getProtoView().templateVariableBindings.has(name);
    }
}
//# sourceMappingURL=template_ref.js.map