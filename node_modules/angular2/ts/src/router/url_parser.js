System.register(['angular2/src/core/facade/collection', 'angular2/src/core/facade/lang', 'angular2/src/core/facade/exceptions'], function(exports_1) {
    var collection_1, lang_1, exceptions_1;
    var Url, RootUrl, SEGMENT_RE, UrlParser, parser;
    function pathSegmentsToUrl(pathSegments) {
        var url = new Url(pathSegments[pathSegments.length - 1]);
        for (var i = pathSegments.length - 2; i >= 0; i -= 1) {
            url = new Url(pathSegments[i], url);
        }
        return url;
    }
    exports_1("pathSegmentsToUrl", pathSegmentsToUrl);
    function matchUrlSegment(str) {
        var match = lang_1.RegExpWrapper.firstMatch(SEGMENT_RE, str);
        return lang_1.isPresent(match) ? match[0] : '';
    }
    function serializeParams(paramMap) {
        var params = [];
        if (lang_1.isPresent(paramMap)) {
            collection_1.StringMapWrapper.forEach(paramMap, (value, key) => {
                if (value == true) {
                    params.push(key);
                }
                else {
                    params.push(key + '=' + value);
                }
            });
        }
        return params;
    }
    exports_1("serializeParams", serializeParams);
    return {
        setters:[
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            /**
             * This class represents a parsed URL
             */
            class Url {
                constructor(path, child = null, auxiliary = lang_1.CONST_EXPR([]), params = null) {
                    this.path = path;
                    this.child = child;
                    this.auxiliary = auxiliary;
                    this.params = params;
                }
                toString() {
                    return this.path + this._matrixParamsToString() + this._auxToString() + this._childString();
                }
                segmentToString() { return this.path + this._matrixParamsToString(); }
                /** @internal */
                _auxToString() {
                    return this.auxiliary.length > 0 ?
                        ('(' + this.auxiliary.map(sibling => sibling.toString()).join('//') + ')') :
                        '';
                }
                _matrixParamsToString() {
                    if (lang_1.isBlank(this.params)) {
                        return '';
                    }
                    return ';' + serializeParams(this.params).join(';');
                }
                /** @internal */
                _childString() { return lang_1.isPresent(this.child) ? ('/' + this.child.toString()) : ''; }
            }
            Url = Url;
            class RootUrl extends Url {
                constructor(path, child = null, auxiliary = lang_1.CONST_EXPR([]), params = null) {
                    super(path, child, auxiliary, params);
                }
                toString() {
                    return this.path + this._auxToString() + this._childString() + this._queryParamsToString();
                }
                segmentToString() { return this.path + this._queryParamsToString(); }
                _queryParamsToString() {
                    if (lang_1.isBlank(this.params)) {
                        return '';
                    }
                    return '?' + serializeParams(this.params).join('&');
                }
            }
            RootUrl = RootUrl;
            var SEGMENT_RE = lang_1.RegExpWrapper.create('^[^\\/\\(\\)\\?;=&#]+');
            class UrlParser {
                peekStartsWith(str) { return lang_1.StringWrapper.startsWith(this._remaining, str); }
                capture(str) {
                    if (!lang_1.StringWrapper.startsWith(this._remaining, str)) {
                        throw new exceptions_1.BaseException(`Expected "${str}".`);
                    }
                    this._remaining = this._remaining.substring(str.length);
                }
                parse(url) {
                    this._remaining = url;
                    if (url == '' || url == '/') {
                        return new Url('');
                    }
                    return this.parseRoot();
                }
                // segment + (aux segments) + (query params)
                parseRoot() {
                    if (this.peekStartsWith('/')) {
                        this.capture('/');
                    }
                    var path = matchUrlSegment(this._remaining);
                    this.capture(path);
                    var aux = [];
                    if (this.peekStartsWith('(')) {
                        aux = this.parseAuxiliaryRoutes();
                    }
                    if (this.peekStartsWith(';')) {
                        // TODO: should these params just be dropped?
                        this.parseMatrixParams();
                    }
                    var child = null;
                    if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
                        this.capture('/');
                        child = this.parseSegment();
                    }
                    var queryParams = null;
                    if (this.peekStartsWith('?')) {
                        queryParams = this.parseQueryParams();
                    }
                    return new RootUrl(path, child, aux, queryParams);
                }
                // segment + (matrix params) + (aux segments)
                parseSegment() {
                    if (this._remaining.length == 0) {
                        return null;
                    }
                    if (this.peekStartsWith('/')) {
                        this.capture('/');
                    }
                    var path = matchUrlSegment(this._remaining);
                    this.capture(path);
                    var matrixParams = null;
                    if (this.peekStartsWith(';')) {
                        matrixParams = this.parseMatrixParams();
                    }
                    var aux = [];
                    if (this.peekStartsWith('(')) {
                        aux = this.parseAuxiliaryRoutes();
                    }
                    var child = null;
                    if (this.peekStartsWith('/') && !this.peekStartsWith('//')) {
                        this.capture('/');
                        child = this.parseSegment();
                    }
                    return new Url(path, child, aux, matrixParams);
                }
                parseQueryParams() {
                    var params = {};
                    this.capture('?');
                    this.parseParam(params);
                    while (this._remaining.length > 0 && this.peekStartsWith('&')) {
                        this.capture('&');
                        this.parseParam(params);
                    }
                    return params;
                }
                parseMatrixParams() {
                    var params = {};
                    while (this._remaining.length > 0 && this.peekStartsWith(';')) {
                        this.capture(';');
                        this.parseParam(params);
                    }
                    return params;
                }
                parseParam(params) {
                    var key = matchUrlSegment(this._remaining);
                    if (lang_1.isBlank(key)) {
                        return;
                    }
                    this.capture(key);
                    var value = true;
                    if (this.peekStartsWith('=')) {
                        this.capture('=');
                        var valueMatch = matchUrlSegment(this._remaining);
                        if (lang_1.isPresent(valueMatch)) {
                            value = valueMatch;
                            this.capture(value);
                        }
                    }
                    params[key] = value;
                }
                parseAuxiliaryRoutes() {
                    var routes = [];
                    this.capture('(');
                    while (!this.peekStartsWith(')') && this._remaining.length > 0) {
                        routes.push(this.parseSegment());
                        if (this.peekStartsWith('//')) {
                            this.capture('//');
                        }
                    }
                    this.capture(')');
                    return routes;
                }
            }
            UrlParser = UrlParser;
            parser = new UrlParser();
        }
    }
});
//# sourceMappingURL=url_parser.js.map