System.register(['angular2/src/core/dom/dom_adapter', 'angular2/angular2', './location_strategy'], function(exports_1) {
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var dom_adapter_1, angular2_1, location_strategy_1;
    var HashLocationStrategy;
    return {
        setters:[
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            },
            function (angular2_1_1) {
                angular2_1 = angular2_1_1;
            },
            function (location_strategy_1_1) {
                location_strategy_1 = location_strategy_1_1;
            }],
        execute: function() {
            /**
             * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
             * {@link Location} service to represent its state in the
             * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
             * of the browser's URL.
             *
             * For instance, if you call `location.go('/foo')`, the browser's URL will become
             * `example.com#/foo`.
             *
             * ## Example
             *
             * ```
             * import {Component, View} from 'angular2/angular2';
             * import {
             *   ROUTER_DIRECTIVES,
             *   ROUTER_PROVIDERS,
             *   RouteConfig,
             *   Location
             * } from 'angular2/router';
             *
             * @Component({directives: [ROUTER_DIRECTIVES]})
             * @RouteConfig([
             *  {...},
             * ])
             * class AppCmp {
             *   constructor(location: Location) {
             *     location.go('/foo');
             *   }
             * }
             *
             * bootstrap(AppCmp, [ROUTER_PROVIDERS]);
             * ```
             */
            let HashLocationStrategy = class extends location_strategy_1.LocationStrategy {
                constructor() {
                    super();
                    this._location = dom_adapter_1.DOM.getLocation();
                    this._history = dom_adapter_1.DOM.getHistory();
                }
                onPopState(fn) {
                    dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('popstate', fn, false);
                }
                getBaseHref() { return ''; }
                path() {
                    // the hash value is always prefixed with a `#`
                    // and if it is empty then it will stay empty
                    var path = this._location.hash;
                    // Dart will complain if a call to substring is
                    // executed with a position value that extends the
                    // length of string.
                    return (path.length > 0 ? path.substring(1) : path) +
                        location_strategy_1.normalizeQueryParams(this._location.search);
                }
                pushState(state, title, path, queryParams) {
                    var url = path + location_strategy_1.normalizeQueryParams(queryParams);
                    if (url.length == 0) {
                        url = this._location.pathname;
                    }
                    else {
                        url = '#' + url;
                    }
                    this._history.pushState(state, title, url);
                }
                forward() { this._history.forward(); }
                back() { this._history.back(); }
            };
            HashLocationStrategy = __decorate([
                angular2_1.Injectable()
            ], HashLocationStrategy);
            HashLocationStrategy = HashLocationStrategy;
        }
    }
});
//# sourceMappingURL=hash_location_strategy.js.map